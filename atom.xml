<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ReModer&#39;s Blog</title>
  
  <subtitle>都是风景，幸会</subtitle>
  <link href="http://remoder.github.io/atom.xml" rel="self"/>
  
  <link href="http://remoder.github.io/"/>
  <updated>2024-04-10T14:13:16.966Z</updated>
  <id>http://remoder.github.io/</id>
  
  <author>
    <name>ReModer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Helpful-Tutorial</title>
    <link href="http://remoder.github.io/Helpful-Tutorial.html"/>
    <id>http://remoder.github.io/Helpful-Tutorial.html</id>
    <published>2024-04-10T14:06:33.000Z</published>
    <updated>2024-04-10T14:13:16.966Z</updated>
    
    <content type="html"><![CDATA[<p><strong>CMake</strong>:<br><a href="https://www.bilibili.com/video/BV1Tw411s7Pk">体系架构</a></p>]]></content>
    
    
    <summary type="html">记录在学习中有幸遇见的优质课程资源</summary>
    
    
    
    
    <category term="Sources" scheme="http://remoder.github.io/tags/Sources/"/>
    
  </entry>
  
  <entry>
    <title>CS61A-FA22 Learning Record</title>
    <link href="http://remoder.github.io/CS61A-Learning-Record.html"/>
    <id>http://remoder.github.io/CS61A-Learning-Record.html</id>
    <published>2023-06-27T08:05:18.000Z</published>
    <updated>2024-02-29T15:16:33.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言-amp-资源"><a href="#前言-amp-资源" class="headerlink" title="前言&amp;资源"></a>前言&amp;资源</h1><p>CS61A 是 Berkeley 大学针对其大一学生所开设的课程，并在互联网上做出了相当程度的透明分享。</p><p><a href="https://inst.eecs.berkeley.edu/~cs61a/archives.html">此处</a> 为 CS61A 课程汇总。</p><p>非校内学生存在一定局限性，其中无法访问的 Recording 可以在 Y2B 或 Bilibili 中寻找，Solution 可以在 Gtihub 中寻找。</p><p>课程中的 Lab 采用了 <code>ok</code> 系统进行检测，非其校内学生可以采用 <code>python3 ok --local -u</code> 的命令进行本地测试，命令 <code>python3 ok --local -q [question number] -i</code> 用于对某个问题进行本地测试。</p><p>建议学习顺序为 <code>Textbook - Lecture - Lab &amp; Disscussion - Homework &amp; Project</code>。 </p><p>为同时学习 Linux 系统，笔者借助 <a href="https://learn.microsoft.com/zh-cn/windows/wsl/about">WSL</a>，于 Win10 中运行 Linux 进行课程学习。</p><h1 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h1><h2 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h2><h3 id="I-Python-中的元素-Elements"><a href="#I-Python-中的元素-Elements" class="headerlink" title="I. Python 中的元素(Elements)"></a>I. Python 中的元素(Elements)</h3><p>Python 中的元素包括但不限于：</p><ul><li><p>表达式(Expressions)<br>  符号表达式(Mathematical Expressions)，如 <code>1 + 2 / 3 * 4 // 5 % 6 ** 7</code><br>  调用表达式(Call Expressions)，如 <code>max(min(1, -2), min(pow(3, 5), -4))</code></p></li><li><p>函数(Functions)<br>  纯函数(Pure Function)，需满足两点：  </p><ul><li>函数的结果只与参数有关，即相同参数必然返回相同结果；  </li><li>在函数执行过程中，没有其他任何操作，也造不成任何影响。</li></ul><p>  非纯函数(Non-Pure Function)，会对其他元素造成影响的函数。  </p><p>  不难发现，纯函数具有很强的优越性：它与调用表达式工作更加融洽，它输出固定易于调试，它不受外部影响、更利于并行处理。</p></li><li><p>变量名(Names)与环境(the Environment)<br>  Python 代码运行于环境之中，而环境包含了许多框架。</p><p>  在不同框架中，可以存在相同的变量名而互不影响，即<strong>局部变量</strong>、<strong>全局变量</strong>。  </p><p>  在调用函数时，便会创立新的框架(Frame)，并优先在新建框架中检索变量，若无法找到，再返回<strong>父框架</strong>(见下文)。可以发现，此处是<strong>栈</strong>的思想。  </p><p>  因而，  </p>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">square</span>):</span><br><span class="line">    <span class="keyword">return</span> square * square</span><br></pre></td></tr></table></figure><p>  这样的代码是可行的，具体可见下段内容的分析。</p></li></ul><h3 id="II-环境图-Environment-Diagram"><a href="#II-环境图-Environment-Diagram" class="headerlink" title="II. 环境图(Environment Diagram)"></a>II. 环境图(Environment Diagram)</h3><p>利用图示方式，将<strong>变量名与框架</strong>直观展现出来，即称为<strong>环境图</strong>。  </p><p>于 <a href="https://pythontutor.com/python-debugger.html#mode=edit">环境图生成网站</a> 中运行代码  </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">square</span>):</span><br><span class="line">    <span class="keyword">return</span> square * square</span><br><span class="line">square(-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>即可感受上文所提的<strong>框架栈</strong>。</p><h3 id="III-嵌套调用表达式-Nested-Call-Expressions-的运行"><a href="#III-嵌套调用表达式-Nested-Call-Expressions-的运行" class="headerlink" title="III. 嵌套调用表达式(Nested Call Expressions)的运行"></a>III. 嵌套调用表达式(Nested Call Expressions)的运行</h3><p>Python 首先识别表达式的操作命令，即 <code>add mul</code> 等，而后去访问算子，亦即函数中的参数。若算子仍为表达式，则继续识别操作命令，而后访问算子，直到两个算子都为数字为止。而后返回计算结果，返回计算结果，…，返回计算结果，最终得到答案。<br>不难发现，这是一个递归的过程。若将每一步都展开并画图示意，则可构建出一棵树，称为<strong>表达式树</strong>(Expression Tree)。</p><h3 id="布尔运算符-Boolean-Operators-的性质"><a href="#布尔运算符-Boolean-Operators-的性质" class="headerlink" title="布尔运算符(Boolean Operators)的性质"></a>布尔运算符(Boolean Operators)的性质</h3><ul><li>not<br>  返回表达式的相反结果，<code>True</code> 或 <code>False</code>。</li><li>and<br>  返回第一个为 <code>False</code> 的值；<br>  若无 <code>False</code>，返回最后一个值。</li><li>or<br>  返回第一个为 <code>True</code> 的值；<br>  若无 <code>False</code>，返回最后一个值。</li></ul><h2 id="Week-2"><a href="#Week-2" class="headerlink" title="Week 2"></a>Week 2</h2><h3 id="I-抽象-Abstraction-的概念"><a href="#I-抽象-Abstraction-的概念" class="headerlink" title="I. 抽象(Abstraction)的概念"></a>I. 抽象(Abstraction)的概念</h3><p>首次接触这个词是在课程 <a href="https://www.bilibili.com/video/BV1EW411u7th">Crash Course Computer Science</a> 中。</p><p>课程从电子元件将起，将晶体管的不同组合<strong>抽象</strong>成逻辑门，将逻辑门的组合<strong>抽象</strong>成加法器，将加法器和门的组合<strong>抽象</strong>成逻辑运算单元······</p><p>而抽象的好处，即设计时不需要再考虑底层，直接将其作为整个“模块”进行使用，从而更好地进行工作开展。</p><p>Python 中也蕴含着许多<strong>抽象</strong>。如，<code>a = 3</code> 这样的赋值语句将数据抽象为变量名，<code>def max()</code> 这样的定义语句将寻找最大值功能抽象为函数。</p><p>函数的抽象使我们不必考虑其内部结构，而只需要考虑三个维度，即：定义域(Domain)，值域(Range)，映射(Intent)。其分别代表了参数的范围、返回值的范围、参数与返回值的关系。</p><p>正是这样的抽象，使得我们在编写代码时会更加流畅，不需要考虑具体的值，不需要在意函数的具体实现方式 ——— 拿来用就是了！</p><h3 id="II-再谈环境-Environment-与框架-Frame"><a href="#II-再谈环境-Environment-与框架-Frame" class="headerlink" title="II. 再谈环境(Environment)与框架(Frame)"></a>II. 再谈环境(Environment)与框架(Frame)</h3><p><strong>用户自定义函数(User-defined Function)</strong> 的内部语句不会在定义时被执行，每当其被调用时，就会创造一个 <code>Local Frame</code>，框架内将会先进行形参赋值，而后被率先执行函数内部语句。</p><p>之前提到过，一个环境中会存在许多框架。而具体来讲，不同的框架组合构成了不同的环境。一个环境要么仅包含一个 <code>Global Frame</code>，要么包含数个 <code>Local Frame</code> 和一个 <code>Global Frame</code>。</p><p>举例来说，最初的环境中仅有 <code>Global Frame</code> 这一个框架。而调用函数后，生成了新的框架 <code>New Frame</code>。此时我们便称，得到了一个包含 <code>Global Frame</code> 和 <code>New Frame</code> 两个框架的新环境。</p><p>这段代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> mul(x, x)</span><br><span class="line">square(square(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>所生成的<strong>环境图</strong>如下，其中便包含了三个环境。</p><p><img src="/Week2-Environment-Diagram-with-3-Environments">  </p><p>相同的变量名可以存在于同一个环境之中，但必须在不同的框架之内。每当寻找变量值时，会首先在最新框架中寻找，若找不到，再返回上一框架。</p><h3 id="III-内在名称-Intrinsic-Name-与绑定名称-Bound-Name"><a href="#III-内在名称-Intrinsic-Name-与绑定名称-Bound-Name" class="headerlink" title="III. 内在名称(Intrinsic Name)与绑定名称(Bound Name)"></a>III. 内在名称(Intrinsic Name)与绑定名称(Bound Name)</h3><p>诸如 <code>f, g = max, min</code> 这样的语句说明，不同的名称有可能代表相同的函数，这样的名称被称之为 <strong>绑定名称(Bound Name)</strong> 。  </p><p>而在函数创建之初，会存在一个唯一的名称，始终保持不变，以指向这个函数，此名称即称为 <strong>内在名称(Intrinsic Name)</strong> 。</p><h3 id="IV-变量名选取准则"><a href="#IV-变量名选取准则" class="headerlink" title="IV. 变量名选取准则"></a>IV. 变量名选取准则</h3><p>选取好的变量名、函数名与参数名是提高代码可读性的基础，以下是一些建议：  </p><ol><li>函数名小写，单词之间用下划线分割，描述性的名字更好。</li><li>函数名要尽可能表明功能，阐述其操作(e.g. print)或结果(e.g. square)。</li><li>参数名小写，单词之间用下划线分割，并尽可能减少单词数量。</li><li>参数名要尽可能表面参数在函数内起到的作用。</li><li>尽可能避免单个字母的混淆，如 <code>I l 1 O 0</code>。</li><li>布尔值变量的命名一般以 <code>is</code> 开头，如 <code>is_finite, is_digit, is_instance</code>。</li></ol><h3 id="V-函数设定原则"><a href="#V-函数设定原则" class="headerlink" title="V. 函数设定原则"></a>V. 函数设定原则</h3><p>为便于调用，函数的设定也应有一定的规则，如：  </p><ol><li>一个函数应只解决一个问题、只有一种功能。而这样的功能应该尽可能简洁，简洁到可以用一句话描述。</li><li>函数应尽可能被多次调用。当自己在复制粘贴自己的代码时，就应该考虑构建函数了。</li><li>函数应尽可能解决普遍的问题。即当 <code>pow()</code> 函数能够涵盖 <code>square()</code> 函数时，前者便应该得到推崇。</li><li>函数的参数尽可能设立默认值，以便于调用。</li></ol><p>此外，函数应包含<strong>文档描述(Docstring)</strong> 。文档描述位于函数体中，用三引号引起，其中的第一行用于说明函数的功能，其后可以解释原理、解释参数等，最好能够指明各参数的数据类型。</p><p>如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pressure</span>(<span class="params">v, t, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the pressure in pascals of an ideal gas</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    v -- volume of gas, in cubic meters</span></span><br><span class="line"><span class="string">    t -- absolute temperature in degrees kelvin</span></span><br><span class="line"><span class="string">    n -- particles of gas</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    k = <span class="number">1.38e-23</span> <span class="comment"># Boltzmann&#x27;s constant</span></span><br><span class="line">    <span class="keyword">return</span> n * k * t / v</span><br></pre></td></tr></table></figure><p>当使用 <code>help(pressure)</code> 的命令时，即可查阅 <code>pressure()</code> 函数的 <code>docstring</code>。</p><p>上示代码中，<code># Boltzmann&#39;s constant</code> 即为注释(Comments)，用以读者理解，不会被编译。</p><h3 id="VI-函数的调试"><a href="#VI-函数的调试" class="headerlink" title="VI. 函数的调试"></a>VI. 函数的调试</h3><ol><li><p>Assertion.<br> 使用 <code>assert fib(8) == 13, &#39;The 8th Fibonacci number should be 13&#39;</code> 语句。<br> 当 <code>fib(8) != 13</code> 时，后面的文本便会显示。</p></li><li><p>Doctests.<br> 此处便是上文提到的<strong>文档描述</strong>，其中可以加入调用命令和期望结果，以进行测试。</p><p> 如：</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_naturals</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the sum of the first n natural numbers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_naturals(10)</span></span><br><span class="line"><span class="string">    55</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_naturals(100)</span></span><br><span class="line"><span class="string">    5050</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    total, k = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total + k, k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><p> 采用以下代码</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> doctest <span class="keyword">import</span> testmod</span><br><span class="line">testmod()</span><br></pre></td></tr></table></figure><p> 或</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> doctest <span class="keyword">import</span> run_docstring_examples</span><br><span class="line">run_docstring_examples(sum_naturals, <span class="built_in">globals</span>(), <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p> 或在命令行中 <code>python3 -m doctest &lt;python_source_file&gt;</code> 都可以此进行函数的检测。</p><p> 这样对单个函数的检测，即被称为<strong>单元测试(Unit Test)</strong> 。</p></li></ol><h3 id="VII-高阶函数-Higher-Order-Functions"><a href="#VII-高阶函数-Higher-Order-Functions" class="headerlink" title="VII. 高阶函数(Higher-Order Functions)"></a>VII. 高阶函数(Higher-Order Functions)</h3><p>高阶函数即<strong>将函数作为参数或返回值</strong>的函数。</p><h4 id="将函数作为参数"><a href="#将函数作为参数" class="headerlink" title="将函数作为参数"></a>将函数作为参数</h4><p>最基本的形式如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">summation</span>(<span class="params">n, term</span>):</span><br><span class="line">    total, k = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total + term(k), k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cube</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x*x*x</span><br><span class="line"></span><br><span class="line">result = summation(<span class="number">3</span>, cube)</span><br></pre></td></tr></table></figure><p>在这个基础上，求得某序列的前 n 项和便很容易了：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pi_term</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">8</span> / ((<span class="number">4</span>*x-<span class="number">3</span>) * (<span class="number">4</span>*x-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">result = summation(n, pi_term)</span><br></pre></td></tr></table></figure><p>由此可见，<code>summation</code> 将<strong>某序列的前 n 项和</strong>的函数功能进一步抽象，仅仅实现了<strong>前 n 项和</strong>的功能。而后借助其他函数，如上文中的 <code>cube</code> <code>pi_term</code> 函数，实现<strong>某序列</strong>的功能。</p><p>接下来，再来看一个例子，以便更好地理解这样的函数，即<strong>普适函数(Functions as General Methods)</strong> ，是如何独立于具体的特定函数之外，将通用的计算方式表达出来的。 </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">improve</span>(<span class="params">update, close, guess=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> close(guess):</span><br><span class="line">        guess = update(guess)</span><br><span class="line">    <span class="keyword">return</span> guess</span><br></pre></td></tr></table></figure><p>函数 <code>improve</code> 并没有指明具体的计算方法与目标值，仅仅是表明：若预估值非目标值，就更新预估值，直到两者足够接近为止。</p><p><a href="https://zh.wikipedia.org/wiki/%E6%96%AF%E9%87%8C%E5%B0%BC%E7%93%A6%E7%91%9F%C2%B7%E6%8B%89%E9%A9%AC%E5%8A%AA%E9%87%91">拉马努金</a>提出的<strong>连分法</strong>用来计算<strong>黄金分割率(Golden Ratio)</strong> 十分合适，即：</p><p>$$Golden.Ratio = \frac{\sqrt{5}-1}{2} = \frac{1}{1+\frac{1}{1+\frac{1}{1+…}}}$$</p><p>借助函数 <code>improve</code>，即可得到目标精度值的黄金分割率。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">golden_update</span>(<span class="params">guess</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + <span class="number">1</span>/guess</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">approx_eq</span>(<span class="params">x, y, tolerance=<span class="number">1e-15</span></span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(x - y) &lt; tolerance</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square_close_to_successor</span>(<span class="params">guess</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;精度检测&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> approx_eq(guess * guess, guess + <span class="number">1</span>) </span><br><span class="line"></span><br><span class="line">golden_ratio = improve(golden_update, square_close_to_successor)</span><br></pre></td></tr></table></figure><p>这样的结构体现出计算机科学的两大重要思想：</p><ol><li><p>变量和函数让我们将相当繁重的复杂性抽象出来，从而得以简化；</p></li><li><p>多个简单函数的相互调用可以实现复杂的过程，实现庞大的功能。</p></li></ol><h4 id="将函数作为返回值"><a href="#将函数作为返回值" class="headerlink" title="将函数作为返回值"></a>将函数作为返回值</h4><p>在上面的例子中，我们将函数都定义在了 <code>Global Frame</code> 中。这样做不会导致什么运行问题，但会产生一些不便：</p><ol><li><code>Global Frame</code> 可能会充斥着这些函数而显得臃肿混；</li><li>定义好的函数在调用时参数数量已经固定，可能会引起一些重复。</li></ol><p>为解决这样问题，<strong>在函数内定义函数</strong>不失为一种解决方法。同样借助 <code>improve</code> 函数，这次我们来利用二分逼近法求得平方根：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sqrt</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sqrt_update</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> average(x, n/x)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sqrt_close</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> approx_eq(x*x, n)</span><br><span class="line">    <span class="keyword">return</span> improve(sqrt_update, sqrt_close)</span><br></pre></td></tr></table></figure><p>这样一来，函数 <code>sqrt_update</code> <code>sqrt_close</code> 便不会出现在 <code>Global Frame</code> 中，而是在 <code>sqrt</code> 被调用时才会被创建于 <code>sqrt Frame</code> 中。</p><p>在这里，进一步丰富关于 <code>Frame</code> 的概念。</p><p>自定义函数有权使用<strong>被定义</strong>而非被调用时所处环境中的变量，这样的性质被称为<strong>词法作用域(Lexical Scope)</strong> 。函数定义时环境中的<strong>最新框架</strong>被称为其的<strong>父框架(Parent Frame)</strong> ，而当函数被调用时，新建框架便会拥有相同的父框架。</p><p>前面说过，寻找变量值时，会由最新框架开始检索，若找不到就返回上一框架。此时我们便知道，上一框架便是指的父框架。在这样的检索过程中，框架与框架之间会成<strong>链状结构</strong>，而这样的链状结构便组成了一个一个的<strong>环境</strong>。</p><p>要进行这样的<strong>链状检索方式</strong>，对我们的<strong>环境</strong>有两个要求：</p><ol><li>每个自定义函数都有一个<strong>父环境</strong>，即函数被定义时的环境。</li><li>当自定义函数被调用时，其 <code>Local Frame</code> 就会拓展到其<strong>父环境</strong>中。</li></ol><p>从中，可以发掘出词法作用域的两大优势：</p><ol><li>函数内定义的函数不会与外部函数的名字发生冲突矛盾。</li><li>函数内定义的函数有权访问“封闭函数”的环境，即，内层函数可以访问到外层函数的作用域。这样的内层函数就称之为<strong>闭包(closures)</strong> 。</li></ol><p>因此，当我们使用函数作为返回值时，就可以避免对外部环境的修改了。</p><h3 id="柯里化-Currying"><a href="#柯里化-Currying" class="headerlink" title="柯里化(Currying)"></a>柯里化(Currying)</h3><p>柯里化，就是用<strong>高阶函数(Higher-order Function)</strong> 将多参数函数转化成各有一个参数的函数链。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">curried_pow</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">h</span>(<span class="params">y</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(x, y)</span><br><span class="line">    <span class="keyword">return</span> h</span><br><span class="line"></span><br><span class="line">curried_pow(<span class="number">2</span>)(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>上面的代码中，就将函数 <code>pow(x, y)</code> 柯里化成了函数 <code>curried_pow(x)(y)</code>。</p><p>当然，我们也可以进行<strong>反柯里化(uncurrying)</strong> ：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">curry</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">h</span>(<span class="params">y</span>):</span><br><span class="line">            <span class="keyword">return</span> f(x, y)</span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uncurry</span>(<span class="params">g</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> g(x)(y)</span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">pow_curried = curry(<span class="built_in">pow</span>)</span><br><span class="line">uncurry(pow_curried)(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>从中可以发现，<code>curry(f)(x)(y)</code> 等价于 <code>f(x, y)</code>，而 <code>uncurry(curry(f))</code> 等价于 <code>f</code>。</p><h3 id="匿名表达式-Lambda-Expressions"><a href="#匿名表达式-Lambda-Expressions" class="headerlink" title="匿名表达式(Lambda Expressions)"></a>匿名表达式(Lambda Expressions)</h3><p>当函数只用来返回表达式结果时，便可以运用匿名表达式来代替。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compose</span>(<span class="params">f, g</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: f(g(x))</span><br></pre></td></tr></table></figure><p>我们可以用以下的结构来进行理解：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x: f(g(x))</span><br><span class="line"><span class="string">&quot;&quot;&quot;A function that (lambda) / takes x (x) / and returns (:) / f(g(x)) (f(g(x)))&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><code>lambda</code>可以视为只含有一个<code>return</code>语句的<code>def</code>语句，他们之间也存在一些异同：</p><ol><li>都具有定义域(Domain)、值域(Range)、映射关系(Behavior)；</li><li>都是将函数与函数名绑定，对应的函数都具有父框架；</li><li><code>def</code> 语句可以为函数创建<strong>内在名称(Intrinsic Name)</strong> ，而 <code>lambda</code> 不可以。</li></ol><p>注意，Python 中一般更喜欢 <code>def</code> 语句，而只在作为参数或返回值时使用 <code>lambda</code>。</p><h3 id="一等函数-First-Class-Functions"><a href="#一等函数-First-Class-Functions" class="headerlink" title="一等函数(First-Class Functions)"></a>一等函数(First-Class Functions)</h3><p>在实际编程中，不能仅仅追求更加强有力的抽象而忽视其他因素。成为一流的编程专家要学会如何<strong>权衡抽象的程度</strong>。</p><p>通常来说，编程语言会对各种计算元素的操作方法施以限制，而限制最少的元素就被我们称为<strong>一等状态(First-class status)</strong> 。一等的元素具有以下特权：  </p><ol><li>他们可以与变量名绑定；</li><li>他们可以作为参数传递给函数；</li><li>他们可以作为函数的返回值；</li><li>他们可以被数据结构包含。</li></ol><p>特别的，Python 给予了<strong>函数(Functions)</strong> 一等状态。</p><h3 id="函数装饰器-Function-Decorators"><a href="#函数装饰器-Function-Decorators" class="headerlink" title="函数装饰器(Function Decorators)"></a>函数装饰器(Function Decorators)</h3><p>Python 为高阶函数提供了特殊的语法，使其能够作用于执行 <code>def</code> 语句的部分，称为<strong>装饰器(Decorator)</strong> 。</p><p>装饰器最常见的应用场景就是<strong>示踪器(trace)</strong> ：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">trace</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapped</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&gt;&#x27;</span>, fn, <span class="string">&#x27;(&#x27;</span>, x, <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> fn(x)</span><br><span class="line">    <span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="meta">@trace</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">triple</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span> * x</span><br><span class="line"></span><br><span class="line">triple(<span class="number">12</span>)</span><br></pre></td></tr></table></figure><p>上述代码中，输出结果为 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-&gt; &lt;function triple at 0x102a39848&gt; ( 12 )</span><br><span class="line">36</span><br></pre></td></tr></table></figure><p>可以见得，上述代码的第二部分等价于：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">triple</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * x</span><br><span class="line"></span><br><span class="line">triple = trace(triple)</span><br></pre></td></tr></table></figure><p>进一步解释，<code>@</code> 后面也可以是一个调用表达式，此语句会被首先执行，而后 <code>def</code> 语句执行，最终，装饰器表达式\装饰器函数的结果会被应用到新定义的函数，最终的结果就会与 <code>def</code> 后的函数名绑定。</p><h2 id="Week-3"><a href="#Week-3" class="headerlink" title="Week 3"></a>Week 3</h2><h3 id="错误与异常处理-Errors-and-Tracebacks"><a href="#错误与异常处理-Errors-and-Tracebacks" class="headerlink" title="错误与异常处理(Errors and Tracebacks)"></a>错误与异常处理(Errors and Tracebacks)</h3><h4 id="错误-Errors"><a href="#错误-Errors" class="headerlink" title="错误(Errors)"></a>错误(Errors)</h4><ol><li>语法错误(Syntax Errors)<br> 如括号不匹配，运算符不规范，变量未定义等；</li><li>运行时出错(Runtime Errors)<br> 如类型错误、除零错误等，在显示时会具体到不同的错误类型；</li><li>逻辑/行为错误(Logical or Behavior Errors)<br> 逻辑上的漏洞导致代码可以执行，但结果不符合预期。</li></ol><h4 id="异常处理-Tracebacks"><a href="#异常处理-Tracebacks" class="headerlink" title="异常处理(Tracebacks)"></a>异常处理(Tracebacks)</h4><p>在执行 <code>.py</code> 文件时，若产生报错，则会显示 <code>Tracebacks</code> 部分，用以说明具体的出错之处及错误原因。</p><h3 id="期中例题"><a href="#期中例题" class="headerlink" title="期中例题"></a>期中例题</h3><h4 id="WWPP-What-Would-Python-Print"><a href="#WWPP-What-Would-Python-Print" class="headerlink" title="WWPP(What Would Python Print?)"></a>WWPP(What Would Python Print?)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">delay</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;delayed&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">g</span>():</span><br><span class="line">        <span class="keyword">return</span> arg</span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure><p>Q1:<br><code>delay(delay)()(6)()</code></p><p>A1: </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">delayed</span><br><span class="line">delayed</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p>Q2:<br><code>print(delay(print)()(4))</code>  </p><p>A2:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">delayed</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure><p>分析：</p><p>Q1 中，分析的对象是这样变化的：<code>delay(delay)()(6)()</code> -&gt; <code>delay(delay)()(6)</code> -&gt; <code>delay(delay)()</code> -&gt; <code>delay(delay)</code> 。其中，每一项都是对后一项函数的调用。<code>delay(delay)</code> 会先输出一个 <code>delayed</code>，而后便可将 <code>delay(delay)</code> 视作 <code>g</code>。故 <code>delay(delay)()</code> 成为了对 <code>g</code> 的调用 <code>g()</code>，返回 <code>arg</code>。本例中，<code>arg</code> 实际为 <code>delay(delay)</code> 时传入的 <code>delay</code>，故 <code>g()</code>、亦即 <code>delay(delay)()</code>，便代表着 <code>delay</code>。而 <code>delay(delay)()(6)</code> 便是将 <code>6</code> 作为参数传入进 <code>delay</code>，输出 <code>delayed</code>，此时 <code>delay(delay)()(6)</code> 便代表着 <code>g</code>。而再次调用 <code>g</code>，便是最终的 <code>delay(delay)()(6)()</code>，此时返回的 <code>arg</code> 便是刚才传入的 <code>6</code>，故而最终输出一个 <code>6</code>。</p><p>Q2 中，分析同理，只需特别注意，<code>print</code> 会输出参数内容，而自身返回一个 <code>None</code>。且当函数的返回值为 <code>None</code> 时，编译器不会输出。</p><h2 id="Week-4"><a href="#Week-4" class="headerlink" title="Week 4"></a>Week 4</h2><h3 id="递归-Recursion"><a href="#递归-Recursion" class="headerlink" title="递归(Recursion)"></a>递归(Recursion)</h3><p>当一个函数在函数体内直接或间接地调用自身时，就形成了 <strong>递归(Recursion)</strong> 。</p><p>以计算阶乘的递归函数为例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fact</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * fact(n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>要检验一个递归函数的正确性，我们只需要：</p><ol><li>考虑其 <strong>边界情况(Base Case)</strong> ，即例中的 <code>return 1 if n == 0</code>；  </li><li>将 <code>fact</code> 视作一种函数的抽象，并<strong>相信</strong>它可以正常工作，即 <code>fact(n-1)</code> 是无误的；</li><li>在此基础上，考虑 <code>fact(n)</code> 的内部结构是否符合正确逻辑。</li></ol><p>第二步中，这种“考虑抽象、相信无误”的做法，被戏称为 <strong>递归的信仰之跃(Recursive Leap of Faith)</strong> 。</p><p>与迭代形式相比，递归形式不需要考虑局部变量命名之间的冲突，更易于进行构建。</p><p>而当递归的过程被分为两个或以上函数互相调用时，就被称为 <strong>相互递归(Mututally Recursive)</strong> 。</p><p>以此二函数为例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_even</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> is_odd(n-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_odd</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> is_even(n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>当然，互相递归的两个函数可以合并成一个函数。无论如何，前者提供了一种在复杂的递归过程中的依然可以保持 <strong>抽象(Abstract)</strong> 的计算方式。</p><p>当函数调用自身的次数超过一次时，就会因其形似于树的调用顺序被称为 <strong>树状递归(Tree Recursive)</strong> ，如 <strong>斐波那契数列(Fibonacci Numbers)</strong> 所示：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(n-<span class="number">2</span>) + fib(n-<span class="number">1</span>) </span><br></pre></td></tr></table></figure><p>类比于 <strong>表达式树(Expressions Tree)</strong> ，读者可以自行画出其树形图示，以观察其调用顺序。</p><h2 id="Week-5"><a href="#Week-5" class="headerlink" title="Week 5"></a>Week 5</h2><h3 id="原生数据类型-Native-Data-Types"><a href="#原生数据类型-Native-Data-Types" class="headerlink" title="原生数据类型(Native Data Types)"></a>原生数据类型(Native Data Types)</h3><p>Python 中的每个值都属于某一个 <strong>类(class)</strong> ，我们将这个类称为 <strong>数据类型(Data Types)</strong> 。类可以视为其实例的模板。同一类的值则具有相同的 <strong>行为(Behavior)</strong> ，例如，<code>1</code> 和 <code>3</code> 都属于 <code>int</code> 类，所以我们可以对其都实施加减乘除等操作，而不需要考虑这些运算是否只对其中一个生效。</p><p>在 Python 中，有许多数据类型是原生的，我们将其称为 <strong>原生数据类型(Native Data Types)</strong> 。它们具有以下两大特性：</p><ol><li>有一些表示原生数据类型之值的表达式，被称为 <strong>字面量(literals)</strong> 。</li><li>内嵌函数和内嵌操作符能够对原生数据类型之值进行运算。</li></ol><p>所幸，原生数据类型的种类不多，降低了我们学习编程语言的记忆门槛。</p><h3 id="数值原生类型-Native-Numeric-Types"><a href="#数值原生类型-Native-Numeric-Types" class="headerlink" title="数值原生类型(Native Numeric Types)"></a>数值原生类型(Native Numeric Types)</h3><p>Python 中有三种数值原生类型，分别为 <code>int</code>, <code>float</code> 和 <code>complex</code>。</p><p><code>int</code> 可以准确地表达一个整型数字，且无大小范围限制；<br><code>float</code> 能表示一个小数，精确但不完全准确，且存在大小范围限制。</p><p>举例来说，<code>7 / 3 * 3</code> 的运行结果是 <code>7.0</code>，而 <code>1 / 3 * 7 * 3</code> 的运行结果是 <code>6.9999999999999</code>，这两者都会可能被认为是 <code>7</code>。</p><p>因此，当使用多个 <code>float</code> 类型数据进行运算时，就要当心出现 <strong>近似误差(Approximation Errors)</strong> 。除此之外，除以一个 <code>int</code> 类型数据也会导致结果的数据类型为 <code>float</code>。</p><h3 id="数据抽象-Data-Abstraction"><a href="#数据抽象-Data-Abstraction" class="headerlink" title="数据抽象(Data Abstraction)"></a>数据抽象(Data Abstraction)</h3><p>将数据的创建与调用方式分割开来的思想就是数据抽象，通过一些函数可实现这两部分的连接。在这种思想下，我们在调用数据时就不需要考虑其是如何被创建的了。</p><p>举例来说，我们创建一个新的数据类型————有理数。有理数由分子、分母构成，受知识所限，我们暂时假定以下函数能够正常使用，而不关注其内部功能如何实现：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rational</span>(<span class="params">n, d</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Return a rational number with numerator n and denominator d. &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">numer</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Return the numerator of the rational number x. &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">denom</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Return the denominator of the rational number x. &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>而拥有了这些基础函数后，我们便可以实现更高一层的操作了：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_rationals</span>(<span class="params">x, y</span>):</span><br><span class="line">    nx, dx = numer(x), denom(x)</span><br><span class="line">    ny, dy = numer(y), denom(y)</span><br><span class="line">    <span class="keyword">return</span> rational(nx * dy + ny * dx, dx * dy)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_rationals</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> rational(numer(x) * numer(y), denom(x) * denom(y))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_rational</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(numer(x), <span class="string">&quot;/&quot;</span>, demon(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rationals_are_equal</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> numer(x) * denom(y) == numer(y) * denom(x)</span><br></pre></td></tr></table></figure><p>可见，即便我们不知道函数 <code>rational</code> <code>numer</code> <code>denom</code> 的具体实现方式，即数据的创建方式，而仍可以通过这些函数对数据进行更高一层的操作，以此便实现了 <strong>数据抽象</strong> 。</p><h3 id="对组-Pairs"><a href="#对组-Pairs" class="headerlink" title="对组(Pairs)"></a>对组(Pairs)</h3><p>含有两个元素的 <strong>列表(list)</strong> 构成了 <strong>对组(pair)</strong> ，对组用来将两个元素绑定到一起，当然，对组的构成方式也并不只有这一种。</p><p>列表的操作可见下文，通过对组，我们便可以实现上文的三个函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rational</span>(<span class="params">n, d</span>):</span><br><span class="line">    <span class="keyword">return</span> [n, d]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">numer</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">denom</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="抽象壁垒-Abstraction-Barriers"><a href="#抽象壁垒-Abstraction-Barriers" class="headerlink" title="抽象壁垒(Abstraction Barriers)"></a>抽象壁垒(Abstraction Barriers)</h3><p>为便于程序编写，我们建立了一层层抽象，每一层的抽象都依附于上一层的抽象之中。在这样的情况下，要变更数据的组成构建而不更改数据的相关操作就变得十分容易。</p><p>上面所举的例子中，我们可以根据各层抽象来形成下表：</p><table><thead><tr><th align="center">程序实现的功能</th><th align="center">分析实数的角度</th><th align="center">用于实现的方式</th></tr></thead><tbody><tr><td align="center">实数间的运算</td><td align="center">一个数据类型</td><td align="center"><code>add_rational</code>, <code>mul_rational</code> <br> <code>rationals_are_equal</code>, <code>print_rational</code></td></tr><tr><td align="center">实数内部运算</td><td align="center">分子和分母</td><td align="center"><code>rational</code>, <code>numer</code>, <code>denom</code></td></tr><tr><td align="center">实数的创建</td><td align="center">一个对组</td><td align="center"><code>list</code> 字面量</td></tr></tbody></table><p>表中最后一列的函数便组成了 <strong>抽象壁垒(Abstraction Barriers)</strong> ，这些函数只能被高一级的抽象调用，或由低一级的抽象构成。</p><p>当某一级抽象越级调用低其多级的抽象时，抽象壁垒就被 <strong>打破</strong> 了。举例来说，符合抽象壁垒的函数应如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square_rational</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> mul_rational(x, x)</span><br></pre></td></tr></table></figure><p>而打破抽象壁垒的函数便是：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square_rational_breaking_barrier</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> rational(numer(x) * numer(x), denom(x) * denom(x))</span><br></pre></td></tr></table></figure><p>抽象壁垒的存在可以方便我们去维护、整改代码，如果某级抽象的实现细节发生改变，而行为功能没有变化，遵循抽象壁垒的代码就能保持正常运行。当然，某层抽象中所依赖的次级抽象函数越少，代码就越安全、越保险。</p><h2 id="Week-6"><a href="#Week-6" class="headerlink" title="Week 6"></a>Week 6</h2><h3 id="序列-Sequences"><a href="#序列-Sequences" class="headerlink" title="序列(Sequences)"></a>序列(Sequences)</h3><p>Python 中有许多序列类型，其所具备的共同点如下：</p><ul><li><strong>长度(Length)</strong> ，序列的长度有限，空序列的长度为 0。</li><li><strong>元素选择(Element Selection)</strong> ，序列的元素与小于其长度的非零整数索引一一对应，首元素的索引为 0。</li><li><strong>成员检测(Membership)</strong> ，返回布尔值，调用如 <code>2 in [1, 3, 5]</code>, <code>2 not in [1, 3, 5]</code>。</li><li><strong>切片(Slicing)</strong> ，<code>digits[x:y:z]</code> 可返回一个列表, 其内容为 <code>digits[x + n*z]</code> 的集合，其式满足 <code>n &gt;= 0 &amp;&amp; x + n*z &lt; y</code>。其中各部分均可省略，<code>x</code> 与 <code>z</code> 省略后为 <code>0</code>，<code>y</code> 省略后为 <code>length</code>。</li></ul><p>对于序列来说，加法乘法不会对元素值有所影响，只是会将序列进行连接或复制。</p><p>特别的，序列有一些特殊的处理方式：</p><ul><li><strong>序列迭代(Sequence Iteration)</strong> ，通过 <code>for</code> 语句可以实现对序列元素的逐个访问。</li><li><strong>序列解包(Sequence unpacking)</strong> ，如 <code>for x, y in [[1, 2], [3, 4]]</code>，同时对两个变量进行迭代。本质上，这与 <code>a, b = 1, 2</code> 是相似的。</li><li><strong>列表解析式(List Comprehensions)</strong> ，<code>[x for x in [1, 3, 5, 7, 9] if 25 % x == 0]</code> 即可生成 <code>[1, 5]</code>。其中 <code>for</code>, <code>in</code>, <code>if</code> 为关键词。</li><li><strong>序列聚合(Sequence Aggregation)</strong> ，即将列表的所有元素聚合为一个值，其典型函数如 <code>sum()</code>, <code>min()</code>, <code>max()</code>。</li></ul><h4 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表(Lists)"></a>列表(Lists)</h4><p>列表的元素可以是任意值，包括列表。在列表嵌套下， <strong>元素选择</strong> 可以多次调用，如 <code>pairs[1][0]</code>。</p><h4 id="范围-Range"><a href="#范围-Range" class="headerlink" title="范围(Range)"></a>范围(Range)</h4><p>内置函数 <code>range(x, y)</code> 可以生成一个整数范围 <code>[x, y)</code>。另，<code>range(x)</code> 视为 <code>range(0, x)</code>。</p><p>一般来说，在进行指定次数的循环时，常使用 <code>for _ in range(x)</code> 实现，其中的 <code>_</code> 表明我们将不使用此变量。</p><h4 id="字符串-Strings"><a href="#字符串-Strings" class="headerlink" title="字符串(Strings)"></a>字符串(Strings)</h4><p>字符串一般由单引号或双引号括起，也可由 <code>str()</code> 生成，如 <code>str(2) + &quot; is in &quot; + str([1, 2, 3])</code>。</p><p>当字符串内容包含引号时，由另一种引号括起，如 <code>&quot;I&#39;m a boy.&quot;</code>，或由转义符号<code>\</code>表示，如 <code>&#39;I\&#39;m a boy.</code>。</p><p>在字符串中， <strong>成员检测(Membership)</strong> 并不寻找元素，而是寻找字串。如 <code>&quot;here&quot; in &quot;Where is Waldo?&quot;</code> 的结果为真。</p><p>值得注意的是，Python 中没有 <strong>字符(character)</strong> 这个数据类型，<code>&#39;x&#39;</code> 被视为长度为 1 的字符串。 </p><p>欲表示多行字符串，可采用三引号的方式，亦或字符 <code>\n</code> (详阅ASCII码):</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; Multiline</span></span><br><span class="line"><span class="string">Literals</span></span><br><span class="line"><span class="string">String &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;Multiline\nLiterals\nString&quot;</span></span><br></pre></td></tr></table></figure><p>三引号引起的字符串常用来做 <strong>文档描述(Doctests)</strong> 。</p><h3 id="树状结构-Trees"><a href="#树状结构-Trees" class="headerlink" title="树状结构(Trees)"></a>树状结构(Trees)</h3><p>树是一种非常经典的数据类型，具有以下特性：</p><ul><li>树有一个 <strong>标签(Label)</strong> 和任意数量的 <strong>枝干(Branches)</strong> 。</li><li>树的每一枝干都是树。</li><li>没有枝干的树被称为 <strong>叶子(Leaves)</strong> 。</li></ul><p>根据特性，我们便可以实现树的基础功能：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tree</span>(<span class="params">root_label, branches=[]</span>):</span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches:</span><br><span class="line">        <span class="keyword">assert</span> is_tree(branch), <span class="string">&#x27;branches must be trees&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> [root_label] + <span class="built_in">list</span>(branches)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">label</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">branches</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_tree</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(tree) != <span class="built_in">list</span> <span class="keyword">or</span> <span class="built_in">len</span>(tree) &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches(tree):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_tree(branch):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_leaf</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> branches(tree)</span><br></pre></td></tr></table></figure><p>通过对 <code>tree()</code> 的递归调用，便可以实现树的构建。如此斐波那契数列树：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib_tree</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> tree(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        left, right = fib_tree(n-<span class="number">2</span>), fib_tree(n-<span class="number">1</span>)</span><br><span class="line">        fib_n = label(left) + label(right)</span><br><span class="line">        <span class="keyword">return</span> tree(fib_n, [left, right])</span><br></pre></td></tr></table></figure><h3 id="链表结构-Linked-Lists"><a href="#链表结构-Linked-Lists" class="headerlink" title="链表结构(Linked Lists)"></a>链表结构(Linked Lists)</h3><p><strong>嵌套数对(Nested Pairs)</strong> 被称为 <strong>链表(Linked Lists)</strong> 。链表有两个元素，第一个元素保存着值，第二个元素为另一个链表，如 <code>[1, [2, [3, [4, &#39;empty&#39;]]]]</code>。</p><h3 id="面向对象编程-Object-Oriented-Programming"><a href="#面向对象编程-Object-Oriented-Programming" class="headerlink" title="面向对象编程(Object-Oriented Programming)"></a>面向对象编程(Object-Oriented Programming)</h3><p><strong>面向对象编程</strong> 的一大特点就是在编写各部分代码时，我们只需要专注于考虑当前部分的逻辑，而最终各部分能够通过 <strong>消息传递(message passing)</strong> 组合在一起进行工作。</p><p>将 <strong>状态(state)</strong> 与 <strong>数据(data)</strong> 相绑定是 <strong>面向对象编程(Object-Oriented Programming)</strong> 的核心思想。</p><p><strong>对象(object)</strong> 是 <strong>状态(state)</strong> 和 <strong>数据(data)</strong> 的连结，包含 <strong>信息(information)</strong> 与 <strong>过程(processes)</strong> ，用于展现复杂事物的 <strong>属性(properties)</strong> 、 <strong>交互(interactions)</strong> 与 <strong>行为(behaviors)</strong> 。</p><p>以日期为例，日期就是一个对象。<code>from datetime import data</code> 中，就将变量 <code>data</code> 与一个 <strong>类(class)</strong> 绑定，而每个单独的日期就是这个 <strong>类(class)</strong> 的一个 <strong>实例(instances)</strong> 。</p><p>实例可以通过对类的带参调用来生成，如 <code>tues = data(2014, 5, 13)</code>。</p><p>对象拥有 <strong>属性(attributes)</strong> ，亦即值。通常，我们用 <code>.</code> 来访问对象的值，如 <code>tues.year</code>。</p><p>对象也拥有 <strong>方法(methods)</strong> ，可以视为函数形式的值。通常， <strong>方法</strong> 是利用 <strong>类</strong> 与 <strong>参数</strong> 所得出 <strong>理想结果</strong> 的函数。</p><p>在 Python 中，所有的值都是类。也就是说，所有的值都会有 <strong>行为(behavior)</strong> 和 <strong>属性(attributes)</strong> 。</p><h3 id="可变数据-Mutable-Data"><a href="#可变数据-Mutable-Data" class="headerlink" title="可变数据(Mutable Data)"></a>可变数据(Mutable Data)</h3><p>Python 中，原始内置值的实例，如数字，都是 <strong>不可变的(immutable)</strong> ，这意味着在程序执行时，这些值本身不会发生改变。</p><p>而 <strong>列表(lists)</strong> 恰好相反，它是 <strong>可变的(mutable)</strong> ：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chinese = [<span class="string">&#x27;coin&#x27;</span>, <span class="string">&#x27;stirng&#x27;</span>, <span class="string">&#x27;myriad&#x27;</span>]</span><br><span class="line">suits = chinese</span><br></pre></td></tr></table></figure><p>之后对 <code>suits</code> 的任何操作，都会导致 <code>chinese</code> 的改变。也就是说，<code>suits = chinese</code> 并没能创建新的列表。通过对 <code>suits</code> 的修改，导致列表中的值发生改变，指向此列表的 <code>chinese</code> 自然也发生改变。</p><p>如果使用 <code>list()</code>，即 <code>suits = list(chinese)</code>，便能够创建新的列表，改动也将不会同时作用于两变量。</p><p>可见，即使两列表的内容相同，他们也可能是不同的列表。为了能够作此区分，Python 提供了 <code>is</code> 和 <code>is not</code> 来检验两表达式是否是同一对象。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = a</span><br><span class="line">c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> <span class="keyword">not</span> c</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == c</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>注，前文所提的 <strong>列表解析式(List Comprehensions)</strong> 总会创建一个新的列表。</p><p>同时，<code>a = a + [4]</code> 与 <code>a += [4]</code> 也不尽相同，前者会创建一个新的列表，而后者则是对原列表进行修改。</p><p>Python 的内置类型 <strong>元组(tuple)</strong> ，可以视为不可变的 <strong>列表(list)</strong> 。与列表的不同是，它由 <code>()</code> 括起。括号可以省略，尽管习惯上并不如此。任何类型都可以用元组来代替。</p><p>空元组和单元素元组有特殊的语法：<code>()</code> <code>(10,)</code>。</p><p>因为元组不可变，所以列表的一些修改操作无法应用，其他的特性，如切片、元素选择等，则可以类比。</p><p>以下问题选自 <code>Disc06</code> 中的 <code>Q1: WWPD: Mutability</code>，用于检验此部分的学习成果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x += [<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="comment"># What would Python display?</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line"><span class="comment"># What would Python display?</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = x + [<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="comment"># What would Python display?</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line"><span class="comment"># What would Python display?</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># What would Python display?</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = s1</span><br><span class="line"><span class="comment"># What would Python display?</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 <span class="keyword">is</span> s2</span><br><span class="line"><span class="comment"># What would Python display?</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2.extend([<span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="comment"># What would Python display?</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1.append([-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2[<span class="number">5</span>]</span><br><span class="line"><span class="comment"># What would Python display?</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s3 = s2[:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s3.insert(<span class="number">3</span>, s2.pop(<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(s1)</span><br><span class="line"><span class="comment"># What would Python display?</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1[<span class="number">4</span>] <span class="keyword">is</span> s3[<span class="number">6</span>]</span><br><span class="line"><span class="comment"># What would Python display?</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s3[s2[<span class="number">4</span>][<span class="number">1</span>]]</span><br><span class="line"><span class="comment"># What would Python display?</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1[:<span class="number">3</span>] <span class="keyword">is</span> s2[:<span class="number">3</span>]</span><br><span class="line"><span class="comment"># What would Python display?</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1[:<span class="number">3</span>] == s2[:<span class="number">3</span>]</span><br><span class="line"><span class="comment"># What would Python display?</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1[<span class="number">4</span>].append(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s3[<span class="number">6</span>][<span class="number">3</span>]</span><br><span class="line"><span class="comment"># What would Python display?</span></span><br></pre></td></tr></table></figure><h3 id="字典-Dictionaries"><a href="#字典-Dictionaries" class="headerlink" title="字典(Dictionaries)"></a>字典(Dictionaries)</h3><p><strong>字典(Dictionaries)</strong> 是 Python 中的内置数据类型之一，用于储存和构建对应关系。字典储存 <strong>键值对(key-value pairs)</strong> ，其键、值都可视为对象。</p><p>字典通过以 <strong>键(key)</strong> 为基础的索引储存 <strong>值(value)</strong> ，每个键都最多对应一个值。在程序中，字典的顺序是不可预测的。</p><p>通过 <code>dict.values()</code>, <code>dict.keys()</code> 和 <code>dict.items()</code>，可以迭代元素值。</p><p><code>dict()</code> 也可以用来转换其他类型为字典，如 <code>dict([(3, 9), (4, 16), (5, 25)])</code>。</p><p>字典有一些限制：</p><ul><li>字典的键不能是、也不能包含可变数据。</li><li>每个键至多对应一个值。</li></ul><p>第一个限制在底层很好理解，如果键更改了，很难去寻找对应的值。因此，通常使用 <strong>元组(tuple)</strong> 来作为键。</p><p>第二个限制是字典这层抽象的必然结果，否则就不能实现键值的对应关系了。</p><p>字典中有个很实用的函数，即 <code>get()</code>。如 <code>dict.get(key, return_value)</code>。若字典中的 <code>key</code> 有对应值，函数返回值，否则返回 <code>return_value</code>。</p><p>字典也有解析式，形如 <code>&#123;x: x*x for x in range(3, 6)&#125;</code>。</p><h3 id="局部状态-Local-State"><a href="#局部状态-Local-State" class="headerlink" title="局部状态(Local State)"></a>局部状态(Local State)</h3><p>列表和字典都有 <strong>局部状态(Local State)</strong> ，也就是说，他们可以在程序执行时的任何时间节点改变自己的值。</p><p><strong>函数(Functions)</strong> 也可以拥有局部状态，举例来说：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>withdraw(<span class="number">25</span>)</span><br><span class="line"><span class="number">75</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>withdraw(<span class="number">25</span>)</span><br><span class="line"><span class="number">50</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>withdraw(<span class="number">60</span>)</span><br><span class="line"><span class="string">&#x27;Insufficient funds&#x27;</span></span><br></pre></td></tr></table></figure><p>以同样的参数多次调用，其返回结果不同，如此函数便具备了局部状态。当然，这个自定义函数也就是 <strong>非纯函数(Non-Pure Function)</strong> 。</p><p>要使函数功能能够实现，就需要一个变量来储存值，通过高阶函数便可以实现：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_withdraw</span>(<span class="params">balance</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">amount</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> balance</span><br><span class="line">        <span class="keyword">if</span> amount &gt; balance:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Insufficient funds&#x27;</span></span><br><span class="line">        balance -= amount</span><br><span class="line">        <span class="keyword">return</span> balance</span><br><span class="line">    <span class="keyword">return</span> withdraw</span><br><span class="line"></span><br><span class="line">withdraw = make_withdraw(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>代码中的 <code>nonlocal balance</code> 一句用来声明：每当 <code>balance</code> 改变时，都是第一个 <strong>框架(Frame)</strong> 中的 <code>balance</code> 改变。如果没有 <code>nonlocal</code> 的话，则会在当前 <strong>环境(Environment)</strong> 中的第一个 <strong>框架(Frame)</strong> 中了。换言之，<code>nonlocal</code> 说明此变量不存在于 <strong>本地框架(Local Frame)</strong> 和 <strong>全局框架(Global Frame)</strong> 中。而若此变量没有实现绑定值，这句话就会报错。</p><p>追溯程序的执行，我们可以发现，<strong>本地框架(Local Frame)</strong> 之外的变量能够由赋值语句改变了。</p><p>虽然可以指定到其他框架，但在一个函数中，同名变量通常要保证指向相同，否则容易混淆，降低代码可读性。同时，如此可以保证程序的预运算，从而加快运行速度。</p><p><code>nonlocal</code> 语句是将独立的对象互相连接的重要途径，同时各部分也可以保证分隔管理。</p><p>只含有 <strong>纯函数(Pure Functions)</strong> 的表达式中，我们可以用结果值替换函数，而不会影响表达式的结果，这称为 <strong>参考透明性(Referentially Transparent)</strong> 。而 <code>nonlocal</code> 则打破了这一性质。尽管如此，它依然是 <strong>模块化编程(Modular Programs)</strong> 的重要工具。通常，可变数据类型与局部状态会搭配使用。</p><h3 id="调度函数-Dispatch-Function"><a href="#调度函数-Dispatch-Function" class="headerlink" title="调度函数(Dispatch Function)"></a>调度函数(Dispatch Function)</h3><p>调度函数是集许多函数为一体的，它的第一个参数为 <strong>消息(message)</strong> ，其余为所需量。</p><p>通过调度函数，我们可以模拟字典的实现：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dictiionary</span>():</span><br><span class="line">    records = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getitem</span>(<span class="params">key</span>):</span><br><span class="line">        matches = [r <span class="keyword">for</span> r <span class="keyword">in</span> records <span class="keyword">if</span> r[<span class="number">0</span>] == key]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(matches) == <span class="number">1</span>:</span><br><span class="line">            key, value = matches[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setitem</span>(<span class="params">key, value</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> records</span><br><span class="line">        non_matches = [r <span class="keyword">for</span> r <span class="keyword">in</span> records <span class="keyword">if</span> r[<span class="number">0</span>] != key]</span><br><span class="line">        records = non_matches + [[key, value]]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">message, key=<span class="literal">None</span>, value=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> message == <span class="string">&#x27;getitem&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> getitem(key)</span><br><span class="line">        <span class="keyword">elif</span> message == <span class="string">&#x27;setitem&#x27;</span>:</span><br><span class="line">            setitem(key, value)</span><br><span class="line">    <span class="keyword">return</span> dispatch</span><br><span class="line"></span><br><span class="line">d = dictionary()</span><br><span class="line">d(<span class="string">&#x27;setitem&#x27;</span>, <span class="number">3</span>, <span class="number">9</span>)</span><br><span class="line">d(<span class="string">&#x27;setitem&#x27;</span>, <span class="number">4</span>, <span class="number">16</span>)</span><br><span class="line">d(<span class="string">&#x27;getitem&#x27;</span>, <span class="number">3</span>) <span class="comment"># 9</span></span><br></pre></td></tr></table></figure><p>调度函数是抽象函数实现消息传递的方式，为此，我们用条件语句将消息与一组固定的已知消息进行比较。</p><h3 id="传播约束-Propagating-Constraints"><a href="#传播约束-Propagating-Constraints" class="headerlink" title="传播约束(Propagating Constraints)"></a>传播约束(Propagating Constraints)</h3><p>以约束的形式进行程序设计的思路被称为 <strong>声明式编程(Declarative Programming)</strong> ，在此规范下，只需要编程者考虑如何描述待解决问题，而不需要考虑如何去具体解决。</p><p>一般编程通常是单向计算，如 <code>9 * c = 5 * (f - 32)</code>，要计算 <code>c</code>，就要将公式转换为 <code>c = 5 * (f - 32) / 9</code>，这个公式自然不能计算 <code>f</code>。</p><p>而应用 <strong>约束系统(Constraints)</strong> 后，便要从两个参数入手，阐明其相互关系，从而实现转换。</p><h2 id="Week-7"><a href="#Week-7" class="headerlink" title="Week 7"></a>Week 7</h2><h3 id="隐式序列-Implicit-Sequences"><a href="#隐式序列-Implicit-Sequences" class="headerlink" title="隐式序列(Implicit Sequences)"></a>隐式序列(Implicit Sequences)</h3><p><strong>隐式序列(Implicit Sequences)</strong> 不会被完整储存到计算机内存中，而是在被访问时计算出元素值。正如 <code>range()</code> 函数，只有其参数，即首末值，会被记录，而后计算出所需要的元素值。比如 <code>range(1000, 1000000000)[3]</code> 中，就会计算 <code>1000 + 3</code>，而后返回 <code>1003</code>。</p><p>这样直到需要时才会计算值的方法被称为 <strong>懒计算(Lazy Computation)</strong></p><h3 id="迭代器-Iterators"><a href="#迭代器-Iterators" class="headerlink" title="迭代器(Iterators)"></a>迭代器(Iterators)</h3><p>迭代器可以用来提供对数据的逐个顺序访问。</p><p>迭代器有两个组成部分，一个用来计算序列中的下一个值，一个用来检测是否到达了序列末。</p><p>迭代器由函数 <code>iter()</code> 生成，<code>next()</code> 用来获取下一个值。当到达序列末时，<code>next()</code> 就会抛出 <code>StopIteration</code> 异常。</p><p>迭代器会维持 <strong>局部状态(Local State)</strong> 来记录序列中的索引位置。当 <code>next()</code> 被调用时，这个位置就会更新。</p><p>将迭代器传入 <code>iter()</code>，依然会返回此迭代器，而不是一个新迭代器。</p><p>迭代器可以实现顺序访问一系列的值，而不需要将所有值储存在内存中。虽然不如随意访问序列中的元素那样灵活，顺序访问依然在数据处理应用中十分有效。</p><p>迭代器是 <strong>可变的(mutable)</strong> ，也可以通过不抛出 <code>StopIteration</code> 异常来实现无限序列。</p><p>任何可以被传入 <code>iter()</code> 来生成迭代器的值被称为 <strong>可迭代值(Iterable Value)</strong> ，包括但不限于 <strong>字符串(Strings)</strong> 、 <strong>元组(Tuples)</strong> 、 <strong>集合(Sets)</strong> 、 <strong>字典(Dictionaries)</strong> 、 <strong>迭代器(Iterators)</strong> 。</p><p>像字典这样的无序序列，也会在生成迭代器时产生顺序。如果字典的内容有删增，原迭代器就会报废，而 <strong>值(Values)</strong> 的改变不会影响迭代器。</p><p>有一些内置函数，如 <code>map()</code> <code>fliter()</code> <code>zip()</code> <code>reversed</code>，都可以传入迭代器，并返回迭代器。</p><p>如 <code>range()</code> 一般， <strong>可迭代对象(Interable Objects)</strong> 可以作为 <code>for &lt;name&gt; in &lt;expression&gt;:</code> 中的 <code>&lt;expression&gt;</code>。</p><p>在此，<code>for</code> 的执行过程便得以追踪：</p><ol><li>检测 <code>&lt;expression&gt;</code> 是否可迭代。</li><li>访问 <code>&lt;expression&gt;</code> 的下一个值。</li><li>如果没有抛出 <code>StopInteration</code> 异常，就将值绑定到 <code>&lt;name&gt;</code> 变量，否则退出。</li><li>执行内部语句。</li></ol><h3 id="生成器-Generator"><a href="#生成器-Generator" class="headerlink" title="生成器(Generator)"></a>生成器(Generator)</h3><p>生成器是由 <strong>生成器函数(Genrator Functions)</strong> 返回的迭代器。生成器函数中没有 <code>return</code> 语句，而是以 <code>yield</code> 替代。</p><p>生成器通过控制生成器函数的执行过程来获取值。当生成器的 <code>__next__</code> 方法被调用时，生成器函数被执行，直到遇见 <code>yield</code> 停止。这样的执行顺序不会破坏之后创建的新环境。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">letters_generator</span>(): </span><br><span class="line">    current = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> current &lt;= <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">        <span class="keyword">yield</span> current</span><br><span class="line">        current = <span class="built_in">chr</span>(<span class="built_in">ord</span>(current) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> letters_generator():</span><br><span class="line">    <span class="built_in">print</span>(letter)</span><br></pre></td></tr></table></figure><p>调用函数时，函数并不返回 <code>yield</code> 后的值，而是一个生成器，这个生成器可以返回其值。</p><p>除 <code>yield</code> 外，还有 <code>yield from</code> 语句，可以理解为 <code>yield &lt;each element&gt; from &lt;an iterator or iterable&gt;</code>。</p><h3 id="流-Streams"><a href="#流-Streams" class="headerlink" title="流(Streams)"></a>流(Streams)</h3><p>流是另一种隐式序列的形式，本质上是 <strong>懒计算(Lazy Computation)</strong> 的 <strong>链表(Linked List)</strong> 。</p><p>像链表，流有两个元素，且第二个元素还是流。但其第二个元素只有在被检索时才会计算。</p><p>为了实现这样的懒计算，流需要储存计算第二个元素的方法。当函数被调用时，计算出来的值就会被赋予 <code>_rest</code>，其中的下划线表明这个变量不能够直接访问。</p><p>同样，流也可以表示无限序列。</p><h3 id="对象和类-Objects-and-Classes"><a href="#对象和类-Objects-and-Classes" class="headerlink" title="对象和类(Objects and Classes)"></a>对象和类(Objects and Classes)</h3><p>每个 <strong>对象(Object)</strong> 都是 <strong>类(Class)</strong> 的 <strong>实例(Instance)</strong> 。如，某辆汽车是一个对象，它属于汽车这个类，因此是这个类的一个实例。</p><p>创建一个新的实例被称为 <strong>类的实例化(Instantiating)</strong> 。</p><p>对象的 <strong>属性(Attribute)</strong> 是与对象相关联的变量值，通过 <code>.</code> 进行访问。对象的 <strong>方法(Methods)</strong> 是操作对象的函数。</p><p>类可以进行自定义，一般语句结构如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> &lt;name&gt;:</span><br><span class="line">    &lt;suite&gt;</span><br></pre></td></tr></table></figure><p>以银行账户举例，进行类的创建：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, account_holder</span>):</span><br><span class="line">        self.balance = <span class="number">0</span></span><br><span class="line">        self.holder = account_holder</span><br></pre></td></tr></table></figure><p>其中的 <code>__init__()</code> 被称为类的 <strong>构造函数(constructor)</strong> ，是用来初始化对象的。它有两个参数，第一个是 <code>self</code>，表明新创建的 <code>Account</code> 对象，第二个就是所需要的参数。</p><p>完成类的创建后，现在就可以进行类的实例化了：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = Account(<span class="string">&#x27;Kirk&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这个对 <code>Account</code> 类的调用创建了新的对象，也就是一个此类的实例，而后 <code>__init__()</code> 函数就会被调用，<code>balance</code> <code>holder</code> 都完成了赋值。</p><p>同一类的两个实例会拥有各自独立的属性，他们相互不受影响。为了加强这样的独立性，每个自定义类的实例都有独一无二的 <strong>身份(Identity)</strong> 。同样，<code>is</code> 和 <code>is not</code> 可以用来判断，两实例是否相同。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = Account(<span class="string">&#x27;Spock&#x27;</span>)</span><br><span class="line">b.balance = <span class="number">200</span></span><br><span class="line">a <span class="keyword">is</span> a <span class="comment"># True</span></span><br><span class="line">b <span class="keyword">is</span> <span class="keyword">not</span> a <span class="comment"># True</span></span><br><span class="line">c = a</span><br><span class="line">c <span class="keyword">is</span> a <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>只有在进行 <strong>类的实例化</strong> 的时候，才会创建新的对象实例。</p><p>在类中， <strong>方法(Methods)</strong> 通过 <code>def</code> 语句进行定义：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, account_holder</span>):</span><br><span class="line">        self.balance = <span class="number">0</span></span><br><span class="line">        self.holder = account_holder</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deposit</span>(<span class="params">self, amount</span>):</span><br><span class="line">        self.balance += amount</span><br><span class="line">        <span class="keyword">return</span> self.balance</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="keyword">if</span> amount &gt; self.balance:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Insufficient funds&#x27;</span></span><br><span class="line">        self.balance -= amount</span><br><span class="line">        <span class="keyword">return</span> self.balance</span><br></pre></td></tr></table></figure><p>每个方法的第一个参数都是 <code>self</code>，通过这个，方法能够访问对象的内部状态。</p><p>对方法的调用依然是通过 <code>.</code>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">spock_account = Account(<span class="string">&#x27;Spock&#x27;</span>)</span><br><span class="line">spock_account.deposit(<span class="number">100</span>) <span class="comment"># 100</span></span><br><span class="line">spock_account.withdraw(<span class="number">90</span>) <span class="comment"># 10</span></span><br><span class="line">spock_account.withdraw(<span class="number">90</span>) <span class="comment"># &#x27;Insufficient funds&#x27;</span></span><br><span class="line">spock_account.holder <span class="comment"># &#x27;Spock&#x27;</span></span><br></pre></td></tr></table></figure><p>方法和属性都是面向对象编程的重要基础元素。像调度函数一样，对象通过 <code>.</code> 接收 <strong>消息(Message)</strong> ，但其并非字符串，而是类的本地变量名。</p><p>可以看出，对象也有局部状态值，也就是实例属性，但它是通过 <code>.</code> 来访问的，并没有 <code>nonlocal</code> 语句。</p><p>通过 <code>.</code>，我们可以实现对 <strong>消息(Message)</strong> 的直接运用，如 <code>spock_account.holder</code>，而不需要通过函数，如 <code>getattr(spock_account, &#39;holder&#39;)</code> 进行。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(Account.deposit) </span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;function&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(spock_account.deposit)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;method&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>上述代码中，前者为 <strong>函数(Functions)</strong> ，后者为 <strong>已绑定方法(Bound Methods)</strong> 。简单来看，前者需要两个参数，而后者只需要一个：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Account.deposit(spock_account, <span class="number">1001</span>)</span><br><span class="line"><span class="number">1011</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spock_account.deposit(<span class="number">1000</span>)</span><br><span class="line"><span class="number">2011</span></span><br></pre></td></tr></table></figure><p>通常，类的变量名会使用 <strong>驼峰命名法(CamelCase)</strong> ，而方法依然采用小写与下划线的组合。</p><p>有些属性由所有实例共同享有，称为 <strong>类属性(Class Attributes)</strong> ，依此进行定义：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    interest = <span class="number">0.02</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, account_holder</span>):</span><br><span class="line">        self.balance = <span class="number">0</span></span><br><span class="line">        self.holder = account_holder</span><br></pre></td></tr></table></figure><p>当发生重名时，会以 <code>实例属性 -&gt; 类属性</code> 的顺序进行访问。</p><p>对类属性的更改会对所有的同类实例生效，但对某一实例的类属性修改不会影响其他实例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>kirk_account.interest = <span class="number">0.08</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kirk_account.interest</span><br><span class="line"><span class="number">0.08</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spock_account.interest</span><br><span class="line"><span class="number">0.02</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Account.interest = <span class="number">0.04</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spock_account.interest </span><br><span class="line"><span class="number">0.04</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kirk_account.interest</span><br><span class="line"><span class="number">0.08</span></span><br></pre></td></tr></table></figure><p>以上代码中，其实第一行是为实例 <code>kirk_account</code> 创建了一个 <code>interest</code> 并赋值为 <code>0.08</code>。</p><h3 id="继承-Inheritance"><a href="#继承-Inheritance" class="headerlink" title="继承(Inheritance)"></a>继承(Inheritance)</h3><p>很多时候，不同类型之间也是有所关联的，而且相似的类也可能会有细节上的不同。在这种时候，就可以用到继承了。</p><p>顾名思义，继承意为某一类从另一类中获取一些属性或方法。前者被称为 <strong>子类(Sub Class \ Child Class)</strong> ，后者被称为 <strong>基类(Base Class)</strong> 或 <strong>父类(Parent Class)</strong> 。</p><p>子类从父类处继承属性和方法，不过允许 <strong>重载(Override)</strong> ，即再次定义。</p><p>通过在<code>类名(CheckingAccount)</code>后面附带<code>父类名(Account)</code>来使用继承：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CheckingAccount</span>(<span class="title class_ inherited__">Account</span>):</span><br><span class="line">    withdraw_charge = <span class="number">1</span></span><br><span class="line">    interest = <span class="number">0.01</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="keyword">return</span> Account.withdraw(self, amount + self.withdraw_charge)</span><br></pre></td></tr></table></figure><p>继承代表着 <strong>是(is-a)</strong> 而非 <strong>包含(has-a)</strong> ，即子类 <strong>是</strong> 父类的一种特殊类型，父类并不 <strong>包含</strong> 子类，正如这里的 <code>CheckingAccount</code> 也是一种 <code>Account</code>。</p><p>与继承对应的是 **构成(compostion)**，也就是 **包含(has-a)**。就像 <code>Bank</code> 可能会有 <code>Account</code> 一样，<code>class Back</code> 可能会就含有 <code>class Account</code>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bank</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.accounts = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_account</span>(<span class="params">self, holder, amount, kind=Account</span>):</span><br><span class="line">        account = kind(holder)</span><br><span class="line">        account.deposit(amount)</span><br><span class="line">        self.accounts.append(account)</span><br><span class="line">        <span class="keyword">return</span> account</span><br></pre></td></tr></table></figure><p>在访问时，Python 会首先寻找实例的属性方法，而后是类属性方法，再之后回去父类中寻找。</p><p>正因如此，我们通常用类似于 <code>self.withdraw_charge</code> 而非 <code>CheckingAccount.withdraw_charge</code>，以防方法被重载后调用老函数。</p><p>重载时，也可能会有多个父类，用逗号分隔即可。</p><p>为解决<strong>钻石继承</strong>的问题，Python 提供了算法 <a href="https://www.zhihu.com/tardis/zm/art/416584599?source_id=1005">方法解析顺序(MRO)</a>，通过 <code>[c.__name__ for c in TheClass.mro()]</code> 可以获取继承顺序列表。</p><h2 id="Week-8"><a href="#Week-8" class="headerlink" title="Week 8"></a>Week 8</h2><h3 id="字符串转换-String-Conversion"><a href="#字符串转换-String-Conversion" class="headerlink" title="字符串转换(String Conversion)"></a>字符串转换(String Conversion)</h3><p>在 Python 中，所有的 <strong>对象(object)</strong> 都有两种字符串的表现形式，一种用于与人进行交互，一种用于 Python 的执行，其中前者是指 <code>str()</code>，后者则为 <code>repr()</code>。其工作原理是调用目标对象的 <code>__str__</code> 与 <code>__repr__</code> 方法。</p><p>举例来说，在 Python 的 <code>fractions</code> 库中，包含对分数进行操作的函数。通过 <code>a = fractions.Fraction(1, 2)</code> 可以创建分数 <code>1/2</code>。</p><p>此时 <code>str(a)</code> 的返回结果为 <code>&#39;1/2&#39;</code>，而 <code>repr(a)</code> 则为 <code>&#39;Fraction(1, 2)</code>。</p><p>正因为 <code>repr()</code> 返回的结果可以被 Python 执行，通常会有 <code>eval(repr(object)) = object</code>。</p><p>而像 <code>__str__</code> <code>__repr__</code> 这样的方法，我们期望其对不同的数据类型 —— 包括那些 <strong>用户自定义类型(user-defined classes)</strong> —— 都能够适用。如果函数能够满足这样的性质，我们就称其为 <strong>泛型函数(generic function)</strong> 。同时，<code>.</code> 的另一功能也得到了发掘 —— 将已存函数的 <strong>定义域(domain)</strong> 扩展到新的对象类型。</p><p>容易想到，要创建这样的一个函数，可以在每个类中为同一属性名做出不同定义。</p><h3 id="特殊方法-Special-Methods"><a href="#特殊方法-Special-Methods" class="headerlink" title="特殊方法(Special Methods)"></a>特殊方法(Special Methods)</h3><p>Python 中，有一些 <strong>特殊方法(Special Methods)</strong> 会在某些时刻被执行器调用，如对象创建时会调用 <code>__init__</code> 、输出时会调用 <code>__str__</code>。</p><h4 id="真假值-True-and-False-Values"><a href="#真假值-True-and-False-Values" class="headerlink" title="真假值(True and False Values)"></a>真假值(True and False Values)</h4><p>我们知道，在 Python 中，非 0 即真。对于自定义类型而言，如果没有特别说明，默认会返回 <code>True</code>。</p><p>要对此进行更改，就可以对 <code>__bool__</code> 进行定义：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__bool__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="序列操作-Sequence-Operations"><a href="#序列操作-Sequence-Operations" class="headerlink" title="序列操作(Sequence Operations)"></a>序列操作(Sequence Operations)</h4><p><code>len()</code> 函数会调用 <code>__len__</code> 方法。</p><p>当 <code>__bool__</code> 没有被定义时，实则会根据 <code>__len__</code> 返回真假值。</p><p>用于选择元素的 <code>[]</code> 实则是调用了 <code>__getitem__</code>，如 <code>&#39;ABC&#39;[1] = &#39;ABC&#39;.__getitem__(1)</code>。</p><h4 id="可调用对象-Callable-Objects"><a href="#可调用对象-Callable-Objects" class="headerlink" title="可调用对象(Callable Objects)"></a>可调用对象(Callable Objects)</h4><p>前面提到过，函数是 <strong>一等对象(first-class objects)</strong> ，可以被当成数据传递，也可以像其他对象一样拥有属性。</p><p>通过 <code>__call__</code> 方法，我们定义的类就可以像函数一样被调用。如此定义的 <strong>类(class)</strong> 就像 <strong>高阶函数(higher-order function)</strong> 一样了：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_adder</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adder</span>(<span class="params">k</span>):</span><br><span class="line">        <span class="keyword">return</span> n + k</span><br><span class="line">    <span class="keyword">return</span> adder</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adder</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n</span>):</span><br><span class="line">        self.n = n</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="keyword">return</span> self.n + k</span><br><span class="line"></span><br><span class="line">add_three_func = make_adder(<span class="number">3</span>)</span><br><span class="line">add_three_obj = Adder(<span class="number">3</span>)</span><br><span class="line">add_three_func(<span class="number">4</span>) <span class="comment"># return 7</span></span><br><span class="line">add_three_obj(<span class="number">4</span>)  <span class="comment"># return 7</span></span><br></pre></td></tr></table></figure><h4 id="算术-Arithmetic"><a href="#算术-Arithmetic" class="headerlink" title="算术(Arithmetic)"></a>算术(Arithmetic)</h4><p>在使用 <code>+ - * / // **</code> 等运算符时，也会有一些特殊方法被调用。举例来说，当计算 <code>+</code> 时，Python 会首先调用左侧算子的 <code>__add__</code>，并将右侧算子当作参数传入；如果调用失败，则去尝试调用右侧算子的 <code>__radd__</code>，并将左侧算子当作参数传入。</p><h3 id="多样模态-Multiple-Representations"><a href="#多样模态-Multiple-Representations" class="headerlink" title="多样模态(Multiple Representations)"></a>多样模态(Multiple Representations)</h3><p>此标题名为笔者自译，模态在此指存在形式，在下文中将得以澄清。</p><p>对于某一种数据而言，其模态并不唯一，而我们自然希望所设计的系统能够跨越多个模态进行工作。</p><p>举例来说，<strong>复数(complex numbers)</strong> 由两种很常见的模态，或称为表征方式，即 <strong>复平面系(rectangular form)</strong> 和 <strong>极坐标系(polar form)</strong> 。其中前者由 <strong>实部(real part)</strong> 和 <strong>虚部(imaginary part)</strong> 组成，后者由 <strong>模长(magnitude)</strong> 和 <strong>复幅度(angle)</strong> 组成。</p><p>以此举例，我们要如何设计程序系统以兼容两种模态。</p><p>首先，两种模态应该满足各自独立，即其之间具有 <strong>抽象壁垒(abstract barriers)</strong> 。为此，要先建立更高一层的抽象。注意到，两种 <strong>复数(complex number)</strong> 都是 <strong>数(number)</strong> ：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.add(other)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.mul(other)</span><br></pre></td></tr></table></figure><p>这里的 <code>Number</code> 既没有 <code>add</code>，又没有 <code>mul</code>，甚至没有 <code>__init__</code>，因为它仅仅是作为那些 <strong>不同类型的数</strong> 的基类存在。</p><p>放在这个具体的例子来看，所谓“不同类型的数”就是复数了。因此接下来的任务，就是为 <code>class Complex</code> 补足对应的方法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>(<span class="title class_ inherited__">Number</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> ComplexRI(self.real + other.real, self.imag + other.imag)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">self, other</span>):</span><br><span class="line">        magnitude = self.magnitude * other.magnitude</span><br><span class="line">        <span class="keyword">return</span> ComplexMA(magnitude, self.angle + other.angle)</span><br></pre></td></tr></table></figure><p>显然，<code>ComplexRI</code> 是复平面系模态，而 <code>ComplexMA</code> 则是极坐标系模态。</p><h4 id="Property-装饰器"><a href="#Property-装饰器" class="headerlink" title="@Property 装饰器"></a>@Property 装饰器</h4><p>虽然两种复数模态各自独立，但因为表示的是同一复数，所以必然存在某些对应关系。为维护这种关系，解决办法则是通过计算得出另一模态的参数信息。如通过实部虚部可以得出模长和复幅度，通过模长和复幅度也可以算出实部虚部。</p><p>在 Python 中，有一个特性使得能够像访问 <strong>属性(arrtitude)</strong> 一样访问 <strong>方法(method)</strong> ，即 <code>@property</code> 装饰器：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> atan2</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComplexRI</span>(<span class="title class_ inherited__">Complex</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, real, imag</span>):</span><br><span class="line">        self.real = real</span><br><span class="line">        self.imag = imag</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">magnitude</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.real ** <span class="number">2</span> + self.imag ** <span class="number">2</span>) ** <span class="number">0.5</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">angle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> atan2(self.imag, self.real)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ComplexRI(&#123;0:g&#125;, &#123;1:g&#125;)&#x27;</span>.<span class="built_in">format</span>(self.real, self.imag)</span><br></pre></td></tr></table></figure><p>这样一来，就可以通过 <code>ComplexRI(5, 12).real</code> 这样来访问了。</p><p>类似地，<code>ComplexMA</code> 也如此定义：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sin, cos, pi</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComplexMA</span>(<span class="title class_ inherited__">Complex</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, magnitude, angle</span>):</span><br><span class="line">        self.magnitude = magnitude</span><br><span class="line">        self.angle = angle</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">real</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.magnitude * cos(self.angle)</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">imag</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.magnitude * sin(self.angle)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ComplexMA(&#123;0:g&#125;, &#123;1:g&#125; * pi)&#x27;</span>.<span class="built_in">format</span>(self.magnitude, self.angle/pi)</span><br></pre></td></tr></table></figure><p>通过上述方法，在 <code>ComplexRI</code> 中对 <code>real</code> <code>imag</code> 的修改自然会引起 <code>magnitude</code> <code>angle</code> 的变化，而在 <code>ComplexMA</code> 中则反之。</p><p>通过对复数两模态的定义，<code>Complex</code> 类已经可以正常使用了：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line">ComplexRI(<span class="number">1</span>, <span class="number">2</span>) + ComplexMA(<span class="number">2</span>, pi/<span class="number">2</span>) <span class="comment"># return ComplexRI(1, 4)</span></span><br><span class="line">ComplexRI(<span class="number">0</span>, <span class="number">1</span>) + ComplexRI(<span class="number">0</span>, <span class="number">1</span>) <span class="comment"># return ComplexMA(1, 1 * pi)</span></span><br></pre></td></tr></table></figure><p>每个模态的类都是相互独立的，只是通过相同的属性名将其连接在一起，即上文所提的 <strong>共享接口(shared interfaces)</strong> 。这样的 <strong>接口(interface)</strong> 是具有 <strong>可叠加性(additive)</strong> 的 ———— 如果想要拓展到复数的第三种模态，只要再创建一个类，然后依然保持相同的属性名就可以了。</p><h3 id="泛型函数-Type-Dispatching"><a href="#泛型函数-Type-Dispatching" class="headerlink" title="泛型函数(Type Dispatching)"></a>泛型函数(Type Dispatching)</h3><p><strong>泛型函数(Generic Function)</strong> 可以操作不同类型的值，主要通过 <strong>共享接口(shared interfaces)</strong> 、 <strong>类型调度(type dispatching)</strong> 和 <strong>类型转换(type coercion)</strong> 来实现。</p><p>共享接口是针对类的内部定义的操作，在前文中已经做出详尽解释。接下来将对类型调度与类型转换做出更深入的描述。</p><p>首先，我们引入分数的类：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rational</span>(<span class="title class_ inherited__">Number</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, numer, denom</span>):</span><br><span class="line">        g = gcd(numer, denom)</span><br><span class="line">        self.numer = numer // g</span><br><span class="line">        self.denom = denom // g</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Rational(&#123;0&#125;, &#123;1&#125;)&#x27;</span>.<span class="built_in">format</span>(self.numer, self.denom)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, other</span>):</span><br><span class="line">        nx, dx = self.numer, self.denom</span><br><span class="line">        ny, dy = other.numer, other.denom</span><br><span class="line">        <span class="keyword">return</span> Rational(nx * dy + ny * dx, dx * dy)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">self, other</span>):</span><br><span class="line">        numer = self.numer * other.numer</span><br><span class="line">        denom = self.denom * ohter.denom</span><br><span class="line">        <span class="keyword">return</span> Rational(numer, denom)</span><br></pre></td></tr></table></figure><p>按照常理，<code>Rational(2, 5) + ComplexRI(1, 0)</code> 理应是可以计算出来的。实现的方式便是类型调度与类型转换了。</p><h4 id="类型调度-Type-Dispatch"><a href="#类型调度-Type-Dispatch" class="headerlink" title="类型调度(Type Dispatch)"></a>类型调度(Type Dispatch)</h4><p>类型调度就是通过对参数的类型进行识别，进而选择对这些类型适用的操作。</p><p>Python 内置的函数 <code>isinstance()</code> 能够帮助我们实现这个操作。<code>isinstance(object, class)</code> 会返回一个 <code>bool</code> 值，表示 <code>object</code> 是否为 <code>class</code> 的一个实例。这样，我们就能写一个函数来判断复数能否化为实数了：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_real</span>(<span class="params">c</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Return whether c is a real number with no imaginary part. &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(c, ComplexRI):</span><br><span class="line">        <span class="keyword">return</span> c.imag == <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(c, ComplexMA):</span><br><span class="line">        <span class="keyword">return</span> c.angle % pi == <span class="number">0</span></span><br></pre></td></tr></table></figure><p>这是一个非常基础的类型调度函数。而实现类型调度其实并不仅仅使用 <code>isinstance()</code>，也有其他办法，如为 <code>Rational</code> 和 <code>Complex</code> 定义一个 <code>type_tag</code>，当此数据相同时，则两实例为同一类型：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Rational.type_tag = <span class="string">&#x27;rat&#x27;</span></span><br><span class="line">Complex.type_tag = <span class="string">&#x27;com&#x27;</span></span><br></pre></td></tr></table></figure><p>考虑混合运算复数与分数的函数：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_complex_and_rational</span>(<span class="params">c, r</span>):</span><br><span class="line">    <span class="keyword">return</span> ComplexRI(c.real + r.numer/r.denom, c.imag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_complex_and_rational</span>(<span class="params">c, r</span>):</span><br><span class="line">    r_magnitude, r_angle = r.numer/r.denom, <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> r_magnitude &lt; <span class="number">0</span>:</span><br><span class="line">        r_magnitude, r_angle = -r_magnitude, pi</span><br><span class="line">    <span class="keyword">return</span> ComplexMA(c.magnitude * r_magnitude, c.angle + r_angle)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_rational_and_complex</span>(<span class="params">r, c</span>):</span><br><span class="line">    <span class="keyword">return</span> add_complex_and_rational(c, r)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_complex_and_rational</span>(<span class="params">r, c</span>):</span><br><span class="line">    <span class="keyword">return</span> mul_complex_and_rational(c, r)</span><br></pre></td></tr></table></figure><p>当对不同类型的操作都已经完成时，就可以用类型调度将其组合在一起了：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> self.type_tag == other.type_tag:</span><br><span class="line">            <span class="keyword">return</span> self.add(other)</span><br><span class="line">        <span class="keyword">elif</span> (self.type_tag, other.type_tag) <span class="keyword">in</span> self.adders:</span><br><span class="line">            <span class="keyword">return</span> self.cross_apply(other, self.adders)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> self.type_tag == other.type_tag:</span><br><span class="line">            <span class="keyword">return</span> self.mul(other)</span><br><span class="line">        <span class="keyword">elif</span> (self.type_tag, other.type_tag) <span class="keyword">in</span> self.multipliers:</span><br><span class="line">            <span class="keyword">return</span> self.cross_apply(other, self.multipliers)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cross_apply</span>(<span class="params">self, other, cross_fns</span>):</span><br><span class="line">        cross_fn = cross_fns[(self.type_tag, other.type_tag)]</span><br><span class="line">        <span class="keyword">return</span> cross_fn(self, other)</span><br><span class="line">    adders = &#123;(<span class="string">&quot;com&quot;</span>, <span class="string">&quot;rat&quot;</span>): add_complex_and_rational,</span><br><span class="line">              (<span class="string">&quot;rat&quot;</span>, <span class="string">&quot;com&quot;</span>): add_rational_and_complex&#125;</span><br><span class="line">    multipliers = &#123;(<span class="string">&quot;com&quot;</span>, <span class="string">&quot;rat&quot;</span>): mul_complex_and_rational,</span><br><span class="line">                   (<span class="string">&quot;rat&quot;</span>, <span class="string">&quot;com&quot;</span>): mul_rational_and_complex&#125;</span><br></pre></td></tr></table></figure><p>其执行逻辑是明确的：如果两者类型相同，则直接进行加乘；如果类型不同，则去调用相应的处理函数。</p><p>可以发现，通过向 <code>Number.adders</code> 与 <code>Number.multipliers</code> 中添加键值对，能够实现类型调度的拓展。</p><p>如此一来，也就实现了复数与分数直接的运算：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ComplexRI(<span class="number">1.5</span>, <span class="number">0</span>) + Rational(<span class="number">3</span>, <span class="number">2</span>) <span class="comment"># return ComplexRI(3, 0)</span></span><br><span class="line">Rational(-<span class="number">1</span>, <span class="number">2</span>) * ComplexMA(<span class="number">4</span>, pi/<span class="number">2</span>) <span class="comment"># return ComplexMA(2, 1.5 * pi)</span></span><br></pre></td></tr></table></figure><h4 id="类型转换-Type-Coercion"><a href="#类型转换-Type-Coercion" class="headerlink" title="类型转换(Type Coercion)"></a>类型转换(Type Coercion)</h4><p>当分数与复数进行运算时，我们也可以将分数视为虚部为 0 的复数，从而使用复数的运算法则进行计算。这样的转换过程就是 <strong>类型转换(Type Coercion)</strong> 了。</p><p>通常，我们会用函数来实现这样的转换过程：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rational_to_complex</span>(<span class="params">r</span>):</span><br><span class="line">    <span class="keyword">return</span> ComplexRI(r.numer/r.denom, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>通常情况下，并不是任意两类型就能够转换的，所以我们需要有类型之间的关系，通过字典 <code>coercions</code> 可以储存这样的关系。而函数 <code>coerce</code> 就会返回两个相同类型的数据了：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        x, y = self.coerce(other)</span><br><span class="line">        <span class="keyword">return</span> x.add(y)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, other</span>):</span><br><span class="line">        x, y = self.coerce(other)</span><br><span class="line">        <span class="keyword">return</span> x.mul(y)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">coerce</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> self.type_tag == other.type_tag:</span><br><span class="line">            <span class="keyword">return</span> self, other</span><br><span class="line">        <span class="keyword">elif</span> (self.type_tag, other.type_tag) <span class="keyword">in</span> self.coercions:</span><br><span class="line">            <span class="keyword">return</span> (self.coerce_to(other.type_tag), other)</span><br><span class="line">        <span class="keyword">elif</span> (other.type_tag, self.type_tag) <span class="keyword">in</span> self.coercions:</span><br><span class="line">            <span class="keyword">return</span> (self, other.coerce_to(self.type_tag))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">coerce_to</span>(<span class="params">self, other_tag</span>):</span><br><span class="line">        coercion_fn = self.coercions[(self.type_tag, other_tag)]</span><br><span class="line">        <span class="keyword">return</span> coercion_fn(self)</span><br><span class="line">    coercions = &#123;(<span class="string">&#x27;rat&#x27;</span>, <span class="string">&#x27;com&#x27;</span>): rational_to_complex&#125;</span><br></pre></td></tr></table></figure><p>相比类型调度，类型转换拥有以下优势：</p><ol><li><p>对于每一组类型关系，只需要写一个转换函数，而非两个计算函数。不同类型间的运算也仅仅取决于类型，而与具体的运算操作无关。</p></li><li><p>有时转换关系也不一定是 <code>a -&gt; b</code>，也有可能是 <code>a -&gt; c &amp; b -&gt; c</code>。</p></li><li><p>转换函数也有可能是链式的，如 <code>a -&gt; c -&gt; b</code>。这样一来，转换函数的数量也会大大减少。</p></li></ol><p>当然，一些劣势也依然存在，转换函数会丢失参数的原生信息，即丢失原类型的参数。</p><p>在早年的 Python 版本中，其实内置了 <code>__coerce__</code> 方法，但 Python 的内置类型转换系统并未使用，而是在需要时对操作符进行转换，故而此方法被移除了。</p><h2 id="Week-9"><a href="#Week-9" class="headerlink" title="Week 9"></a>Week 9</h2><h3 id="效率-Efficiency"><a href="#效率-Efficiency" class="headerlink" title="效率(Efficiency)"></a>效率(Efficiency)</h3><p><strong>效率</strong>一般分为<strong>时间效率</strong>和<strong>空间效率</strong>。</p><p>正常来说，需要跑出程序才能较为准确地做出测量。但受到机器性能等多种因素的影响，反而不会以此作为参考标准。因此，对程序效率的<strong>事前评估</strong>更为实用。</p><p>时间的评估标准一般是程序的代码总执行次数，而对空间的评估标准则是同时存在的框架数量。</p><p>因为大多程序都会包含循环，所以时间上的消耗一般远远大于输入量；而框架会在程序运行中有创删，所以空间上的消耗一般都会小于输入量。</p><h3 id="记忆化-Memoization"><a href="#记忆化-Memoization" class="headerlink" title="记忆化(Memoization)"></a>记忆化(Memoization)</h3><p>以斐波那契数列的计算为例，计算 <code>fib(10)</code> 时，通过递归树可以发现，<code>fib(x)</code> 会被多次调用。</p><p>显然，对于同一个 <code>fib(x)</code>，当进行完第一次计算后，如果能够记录下其结果，就不必再进行重复的递归调用了。这种思想就被称为**记忆化(Memoization)**：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">memo</span>(<span class="params">f</span>):</span><br><span class="line">    cache = &#123;&#125;</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">memoized</span>(<span class="params">n</span>):</span><br><span class="line">        <span class="keyword">if</span> n <span class="keyword">not</span> <span class="keyword">in</span> cache:</span><br><span class="line">            cache[n] = f(n)</span><br><span class="line">        <span class="keyword">return</span> cache[n]</span><br><span class="line">    <span class="keyword">return</span> memoized</span><br></pre></td></tr></table></figure><h3 id="复杂度-Orders-of-Growth"><a href="#复杂度-Orders-of-Growth" class="headerlink" title="复杂度(Orders of Growth)"></a>复杂度(Orders of Growth)</h3><p>通常来说，我们更加关注于<strong>输入的增长规模</strong>与<strong>程序消耗</strong>之间的关系，并以此来衡量程序的<strong>效率</strong>。</p><p>如果用 $n$ 代表程序的输入规模，$R(n)$ 代表程序消耗的资源，若存在 $$k_1 \times f(n) \leq R(n) \leq k_2 \times f(n)$$，则称 $R(n)$ 的复杂度为 $\Theta (f(n))$，记作 $R(n) = \Theta (f(n))$。</p><p>$f(n)$ 中，常系数、底数一般可以省略，如 $\Theta (50n) = \Theta (n)$, $\Theta (log n) = \Theta (log_2 n) = \Theta (log_10 n)$。</p><p>当 $f(n)$ 为多项式时，也会只取最高次项保留，如 $\Theta (n^2 + n) = \Theta (n^2)$ 。</p><h2 id="Week-10"><a href="#Week-10" class="headerlink" title="Week 10"></a>Week 10</h2><p>目前为止，我们了解到了编程中的两大基本要素，即 <strong>函数(functions)</strong> 和 <strong>数据(data)</strong> 。我们知道两者之间有着密切的关系，函数通过 <strong>高阶函数(higher-order functions)</strong> 可以像数据一样处理，而数据通过 <strong>消息传递(message passing)</strong> 和 <strong>对象系统(object system)</strong> 可以被赋予行为。</p><p>接下来的主题就是第三大基本要素，即 <strong>程序本身(programs themselves)</strong> 。</p><p>Python 程序的本质就其实就是一大串文本，让它运行起来的是 <strong>解释(interpretation)</strong> 的过程。对于不同的解释的方式，亦即解释器，程序运行的结果自然也不相同。</p><p>而追根溯源， <strong>解释器(interpreters)</strong> 其实也是程序。这就意味着，我们可以自己去编写解释器去运行 Python 代码了。</p><p>解释器的通用结构是两个函数，一个用来执行 <strong>环境(environment)</strong> 中的表达式，一个用来执行函数。执行函数时需要执行内部的表达式，而执行表达式有时也需要执行函数，所以两个两者相互递归。</p><h3 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h3><p>Scheme 由 Lisp 延伸而来，是如今广泛使用的第二古老的编程语言，仅次于 Fortran。它的运算模式类似于 Python，但是非常简单，没有类与对象、高阶函数、赋值、循环语句，而只有 <strong>表达式(expressions)</strong> 和 <strong>符号运算(symbolic computation)</strong> 。</p><p>此处是 CS61A 所搭建的<a href="https://code.cs61a.org/scheme">在线Scheme编辑</a>。</p><h4 id="表达式-Expressions"><a href="#表达式-Expressions" class="headerlink" title="表达式(Expressions)"></a>表达式(Expressions)</h4><p><strong>表达式(expressions)</strong> 分为 <strong>调用表达式(call expression)</strong> 和 <strong>特型(special forms)</strong> 。</p><p>调用表达式和 Python 中类似，由 <strong>操作符(operator)</strong> 和 <strong>操作数(operand)</strong> 构成，其两侧用小括号括起，如 <code>(quotient 10 2)</code>。</p><p>与 Python 类似，Scheme 也倾向于使用数学运算符号，但不同于 Python，Scheme 采用的是 **前缀表达式(prefix notation)**，如 <code>(+ (*3 5) (- 10 6))</code>。</p><p>调用表达式可以嵌套，也可以跨行编写：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(+ (* 3</span><br><span class="line">       (+ (* 2 4)</span><br><span class="line">          (+ 3 5)))</span><br><span class="line">   (+ (-10 7)</span><br><span class="line">     6))</span><br></pre></td></tr></table></figure><p>特型与调用表达式的区别在于执行过程的不同。如特型 <code>(if &lt;predicate&gt; &lt;consequent&gt; &lt;alternative&gt;)</code>，会先判断 <code>&lt;predicate&gt;</code> 是否为真，进而执行 <code>&lt;consequent&gt;</code>，否则执行 <code>&lt;alternative&gt;</code>；而调用表达式 <code>(+ &lt;operand_a&gt; &lt;operand_b&gt;)</code>，会先计算出 <code>&lt;operand_a&gt;</code> 和 <code>&lt;operand_b&gt;</code>，而后进行相应运算。</p><p><code>(if xxx xxx xxx)</code> 要处理多种情况时就要多次嵌套，难免会增大编写成本。相应的，<code>(cond (&lt;p1&gt; &lt;e1&gt;) (&lt;p2&gt; &lt;e2&gt;) ... [(else &lt;else-expression&gt;)])</code> 就可以用来处理这样的情况。<code>&lt;p1&gt; &lt;p2&gt; ... &lt;pn&gt;</code> 会被逐个计算，直到出现真值，就执行对应的 <code>&lt;ei&gt;</code>，若没有真值而存在 <code>(else &lt;else-expression&gt;)</code>，则去执行 <code>&lt;else-expression&gt;</code>。</p><p>Scheme 中的比较表达式依然采用前缀的形式，如 <code>(&gt;= 2 1)</code>。其布尔值表示为 <code>#t</code> 或 <code>true</code>、<code>#f</code> 或 <code>false</code>，且布尔运算依然成立，如 <code>(and &lt;e1&gt; ... &lt;en&gt;)</code>、 <code>(or &lt;e1&gt; ... &lt;en&gt;)</code>、<code>(not &lt;e&gt;)</code>。</p><h4 id="定义-Definitions"><a href="#定义-Definitions" class="headerlink" title="定义(Definitions)"></a>定义(Definitions)</h4><p>通过特型 <code>(define &lt;symbol&gt; &lt;value&gt;)</code> 可以将值 <code>&lt;value&gt;</code> 与 <code>&lt;symbol&gt;</code> 绑定，如 <code>(define pi 3.14)</code>；</p><p>通过特型 <code>(define (&lt;symbol&gt; &lt;parameters&gt;) &lt;body&gt;)</code> 可以定义函数，如 <code>(define (square x) (* x x))</code>。</p><p>定义完成后，就可以直接进行调用了，如 <code>(square (square pi))</code>。</p><p>Scheme 中定义的函数与 Python 中有同样的 <strong>词法作用域(lexical scoping)</strong> 规则，因此可以实现嵌套定义和递归：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(define (sqrt x)</span><br><span class="line">  (define (good-enough? guess)</span><br><span class="line">    (&lt; (abs (- (square guess) x)) 0.001))</span><br><span class="line">  (define (improve guess)</span><br><span class="line">    (average guess (/ x guess)))</span><br><span class="line">  (define (sqrt-iter guess)</span><br><span class="line">    (if (good-enough? guess)</span><br><span class="line">      guess</span><br><span class="line">      (sqrt-iter (imrove guess))))</span><br><span class="line">  (sqrt-iter 1.0))</span><br><span class="line"></span><br><span class="line">(sqrt 9)</span><br></pre></td></tr></table></figure><p><strong>匿名函数(Anonymous Functions)</strong> 使用特型 <code>(lambda (&lt;formal-parameters&gt;) &lt;body&gt;)</code> 来创建，如 <code>(lambda (x) (+ x 4))</code>。它可以当作调用表达式被直接调用，如 <code>((lambda (x y z) (+ x y (square z))) 1 2 3)</code>。</p><p>对于函数来说，<code>(define (plus4 x) (+ x 4))</code> 与 <code>(define plus4 (lambda (x) (+ x 4)))</code> 是等价的。</p><h4 id="组合值-Compound-Values"><a href="#组合值-Compound-Values" class="headerlink" title="组合值(Compound Values)"></a>组合值(Compound Values)</h4><p><strong>对组(Pairs)</strong> 也存在于 Scheme 中，由内置函数 <code>cons</code> 来创建，以 <code>car</code> 与 <code>cdr</code> 对应，如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(define x (cons 1 2))</span><br><span class="line">(car x)</span><br><span class="line">(cdr x)</span><br></pre></td></tr></table></figure><p>同样，<strong>递归列表(recursive lists)</strong> 也存在，它就像 Python 中的 <strong>链表(Linked List)</strong> ，由嵌套的 <code>Pairs</code> 组成，以 <code>nil</code> 或 <code>&#39;()</code> 来表示空列表，如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(define one-through-four (list 1 2 3 4))</span><br><span class="line">(car one-through-four)</span><br><span class="line">(cdr one-through-four)</span><br><span class="line">(car (cdr one-through-four))</span><br><span class="line">(cons 10 one-through-four)</span><br><span class="line">(cons 5 one-through-four)</span><br></pre></td></tr></table></figure><p><code>null? &lt;list_name&gt;</code> 用来检测列表是否为空，以此我们也可以得出一些列表的基本操作：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(define (length items)</span><br><span class="line">  if (null? items)</span><br><span class="line">    0</span><br><span class="line">    (+ 1 (length (cdr items))))</span><br><span class="line"></span><br><span class="line">(define (getitem items n)</span><br><span class="line">  (if (= n 0)</span><br><span class="line">    (car items)</span><br><span class="line">    (getitem (cdr items) (- n 1))))</span><br><span class="line"></span><br><span class="line">(define squares (list 1 4 9 16 25))</span><br><span class="line">(length squares)</span><br><span class="line">(getitem squares 3)</span><br></pre></td></tr></table></figure><p>递归链表也内置有一些特型，如 <code>(append s t)</code> <code>(map f s)</code> <code>(filter f s)</code> <code>(apply f s)</code>。</p><h4 id="数据象征-Symblic-Data"><a href="#数据象征-Symblic-Data" class="headerlink" title="数据象征(Symblic Data)"></a>数据象征(Symblic Data)</h4><p>要想能够使用**象征符号(Symbols)**，编程语言就应该能够 <strong>引述(quote)</strong> 数据对象。</p><p><strong>象征符号</strong> 就像是 Python 中的 **名称(name)**，但不完全相同：<br>象征符号是 Scheme 中的一种数据类型，当被读时为象征符号这一数据类型，而被求值时则是其所代表的数据对象；<br>而 Python 中的名称只能是当作表达式来调用，去访问与其绑定的值，不会有 Python 表达式可以被操作成名称。  </p><p>举例来说，当我们定义了 <code>(define a 1)</code> <code>(define b 2)</code> 之后，当进行 <code>(list a b)</code> 时，其中的 <code>a b</code> 均为其所代表的值，而非 <code>a b</code> 的本身。</p><p>而如果我们想要的就是 <code>a b</code> 这两个符号，就可以在其前方加 <code>&#39;</code>，表示 **引述(quote)**，如 <code>(list &#39;a &#39;b)</code> <code>(list a &#39;b)</code>。</p><p>其中 <code>&#39;a</code> <code>&#39;b</code> 其实是特型 <code>(quote a)</code> <code>(quote b)</code> 的缩写形式。</p><p>在 Scheme 中，不需要进行运算的表达式，就是被引述的。</p><h2 id="Week-10-1"><a href="#Week-10-1" class="headerlink" title="Week 10"></a>Week 10</h2><h3 id="异常-Exceptions"><a href="#异常-Exceptions" class="headerlink" title="异常(Exceptions)"></a>异常(Exceptions)</h3><p>异常，就是在程序运行出错时显示的错误信息。Python 中内含了许多异常，我们也可以自行决定在何时 <strong>抛出(raise)</strong> 何种 <strong>异常(exceptions)</strong> 。</p><p>异常也是一种类，由其基类 <code>BaseException</code> 继承而来，而某种异常便是一个实例了。通过语句 <code>raise Exception(&#39;Helper Message&#39;)</code> 可以自行抛出异常。</p><p>通常情况下，我们会如此处理异常：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    &lt;<span class="keyword">try</span> suite&gt;</span><br><span class="line"><span class="keyword">except</span> &lt;exception <span class="keyword">class</span>&gt; <span class="keyword">as</span> &lt;name&gt;:</span><br><span class="line">    &lt;<span class="keyword">except</span> suite&gt;</span><br></pre></td></tr></table></figure><p>其中 <code>try</code> 会首先被执行。若其中出现了 <code>&lt;exception class&gt;</code> 中所含的异常，则将 <code>name</code> 与此种异常绑定，并执行 <code>&lt;except suite&gt;</code> 。若未找到，则试图寻找最近的包含此种异常的 <code>&lt;exception class&gt;</code> 并执行其 <code>&lt;except suite&gt;</code> 。</p><p>以除零异常举例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">invert</span>(<span class="params">x</span>):</span><br><span class="line">    result = <span class="number">1</span>/x</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Never printed if x is 0&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_safe</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> invert(x)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>invert_safe(<span class="number">2</span>)</span><br><span class="line">Never printed <span class="keyword">if</span> x <span class="keyword">is</span> <span class="number">0</span></span><br><span class="line"><span class="number">0.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>invert_safe(<span class="number">0</span>)</span><br><span class="line"><span class="string">&#x27;division by zero&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Week-11"><a href="#Week-11" class="headerlink" title="Week 11"></a>Week 11</h2><p>本周主要为 <code>Project 4: Scheme Interpreter</code> 的细节原理讲解，在做项目的过程中自可习得。</p><h2 id="Week-12"><a href="#Week-12" class="headerlink" title="Week 12"></a>Week 12</h2><h3 id="函数式编程-Functional-Programming"><a href="#函数式编程-Functional-Programming" class="headerlink" title="函数式编程(Functional Programming)"></a>函数式编程(Functional Programming)</h3><h4 id="部分特点"><a href="#部分特点" class="headerlink" title="部分特点"></a>部分特点</h4><ol><li>所有的函数都是 <strong>纯函数(pure functions)</strong> ；</li><li>不存在 <strong>重赋值(re-assignment)</strong> 和 <strong>可变数据类型(mutable data type)</strong> ；</li><li><strong>命名(name)</strong> 与 <strong>值(value)</strong> 的绑定是永久的。<h4 id="部分优势"><a href="#部分优势" class="headerlink" title="部分优势"></a>部分优势</h4></li><li>表达式的值与子表达式的计算顺序无关；</li><li><strong>懒计算(lazy computation)</strong> ，即子表达式可以在任何时间被计算；</li><li><strong>引用透明(referential transparency)</strong> ，即当用其值替代子表达式时，总表达式的值不会改变。</li></ol><p>然而，对于一些纯函数语言，如 Scheme，不存在 <code>while\for</code> 语句，而只能用递归来实现相应操作。在这种情况下，要提高递归的效率，就引出了尾递归。</p><h3 id="尾递归-Tail-Recursion"><a href="#尾递归-Tail-Recursion" class="headerlink" title="尾递归(Tail Recursion)"></a>尾递归(Tail Recursion)</h3><h4 id="判别"><a href="#判别" class="headerlink" title="判别"></a>判别</h4><p>当一个递归函数只等待下一层递归而没有其他操作时，亦即下一层递归的调用是本层递归函数的最后执行语句时（就像尾巴一样），此递归函数就是可尾递归的。</p><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>因为本层递归只在等待着下层递归，这时本次递归所创建的框架就已经可以被释放掉了。这样一来，递归的空间复杂度就被降低到了 <code>O(1)</code> 。</p><h2 id="Week-13"><a href="#Week-13" class="headerlink" title="Week 13"></a>Week 13</h2><h3 id="数据库管理系统-Database-Management-System"><a href="#数据库管理系统-Database-Management-System" class="headerlink" title="数据库管理系统(Database Management System)"></a>数据库管理系统(Database Management System)</h3><p>数据库(database)用于存放数据，具体方式是将数据存放在由行(raw)和列(column)组成的表格(Table)内。  </p><p>管理数据库的应用最广泛的语言是 SQL (Structured Query Language)，属于声明式语言(Declarative Language)，与之相对的是以 Python, Scheme 为代表的命令式语言(Imperative)。  前者告诉计算机所期盼的结果，由计算机自主执行过程；后者为计算机描述执行过程，计算机则照做。  </p><h3 id="SQL-基础语法"><a href="#SQL-基础语法" class="headerlink" title="SQL 基础语法"></a>SQL 基础语法</h3><p><code>select [expression] as [name], [expression] as [name], ... ;</code> 创建一个一行内容的表。  </p><p><code>union</code> 将两张列数相同且同列中数据类型相同的表合为一张，两者的列名也可以不同，最终结果以第一个表为准。另外，合成之后的数据顺序也会被打乱。</p><p><code>select</code> 与 <code>union</code> 结合的写法即为 <code>select [expression11], [expression12] union select [expression21], [expression22];</code></p><p><code>select</code> 只会显示结果，而不会进行保存。需要保存时会使用 <code>create table</code> 语句，其格式为 <code>create table [name] as [select statement];</code></p><p><code>select</code> 同样也可以从已经保存的表中获取数据：<code>select [column] as [name], [column] as [name], ... from [table] where [condition] order by [order];</code></p><p>对多张表进行操作时，只需用 <code>,</code> 隔开即可，如 <code>select * from [table1], [table2], ...;</code>  </p><p>当多张表中含相同列名或表与自身进行操作时，需要进行区分，可用 <strong>别名(Aliases)</strong> 实现：<code>select [alias1].[column1], [alias2].[column2] from [table1] as [alias1], [table2] as [alias2] where ...;</code></p><p>SQL 中也内置一些运算符，在 <code>select where</code> 和 <code>order by</code> 时都可以使用，其包含：<br>比较运算符：= &gt; &lt; &lt;= &gt;= &lt;&gt; !=<br>布尔运算符：AND OR<br>算术运算符：+ - * /<br>字符串连接：||<br>注：尽管有不少函数可以对字符串进行操作，但作为数据库管理语言，还是尽量少用为好。</p><h3 id="聚合函数-Aggregate-function"><a href="#聚合函数-Aggregate-function" class="headerlink" title="聚合函数(Aggregate function)"></a>聚合函数(Aggregate function)</h3><p>在 <code>select</code> 时，如果 <code>select max([name1]), [name2] from [table]</code> ，其中 <code>[name2]</code> 会返回 <code>[name1]</code> 最大值所在行的 <code>[name2]</code>，但当 <code>[name2]</code> 的指向不唯一或不存在时，就会随机返回。</p><h3 id="分组-Grouping"><a href="#分组-Grouping" class="headerlink" title="分组(Grouping)"></a>分组(Grouping)</h3><p><code>select [expression] as [name], [expression] as [name], ... from [table] group by [expression]</code> 可以将数据按 <code>[expression]</code> 分为多个组，此时的聚合函数会在各组分别被应用。<br><code>select [...] from [...] group by [...] having [expression]</code> 按照 <code>[expression]</code> 筛选符合条件的组。</p><h3 id="规范化表格-Modifying-Tables"><a href="#规范化表格-Modifying-Tables" class="headerlink" title="规范化表格(Modifying Tables)"></a>规范化表格(Modifying Tables)</h3><p>创建： <code>create table</code><br>删除： <code>drop table</code><br>插入： <code>insert into</code><br>更新： <code>update ... set ...=... where ...</code><br>删行： <code>delete from ... where ... </code></p>]]></content>
    
    
    <summary type="html">记录 CS61A-FA22 的学习过程。</summary>
    
    
    
    
    <category term="CS" scheme="http://remoder.github.io/tags/CS/"/>
    
    <category term="Python" scheme="http://remoder.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>网途启示录</title>
    <link href="http://remoder.github.io/cyber-apocalypto.html"/>
    <id>http://remoder.github.io/cyber-apocalypto.html</id>
    <published>2023-06-20T08:45:24.000Z</published>
    <updated>2024-03-08T16:42:05.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>得闲以思，接触互联网已有十余年之久。</p><p>鱼龙混杂、包罗万象之处，必有广量信息流通。<br>而在这宏大规模之内，亦必蕴瑰宝其中。</p><p>每每有幸读得他人优美之文，急不待反复咏诵、慕其风采；<br>每每有幸识得他人肺腑之言，总不忍潸然泪下、叹世无常；<br>每每有幸观得他人大义之举，又不止慷慨激昂、奋起疾呼；<br>每每有幸听得他人高远之见，恨不能登门造访、促膝长谈。</p><p>为时常回顾、亦作收藏，本文将记录<strong>笔者认为应被记录</strong>的内容，并标注出处来源。</p><p>考虑到可读性，目前本文采取周更的方式，并将更新日期作为目录，以便于查阅。后期可能会变更检索方式，以便于提供更好的体验。</p><p>本文自然多受局限，包括但不限于：</p><ol><li>无法找到原创作者，在有意或无意中标注转载者；</li><li>原文作者不愿被流传转载，却因某些缘故笔者不得知；</li><li>内容由笔者个人收录，数量上或许只能取其一瓢，质量上也是主观标准。</li></ol><p>对于局限一、局限二，欢迎读者的反馈，本文将会及时进行删改；<br>对于局限三，欢迎读者的分享，但主观标准无法统一，收录与否并无定数。<del>别杠，杠就是你对。</del><br>当然，这也意味着，读者亦可在评论区看到不同的观点，欢迎移步评论区。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="S1-2023-06-20"><a href="#S1-2023-06-20" class="headerlink" title="S1 - 2023.06.20"></a>S1 - 2023.06.20</h2><p><a href="https://www.zhihu.com/question/278071372/answer/397688750">@知乎用户:椰子大魔头</a></p><p>见过世面，有四层。</p><p>第一层，知道天有多高。知道这个世界的顶点在哪里，最好吃的食物，最贵的衣服，最富有的人，最奢华的生活是怎样，最远的地方有多美。大部分人的“见过世面”停留在这一层。也最简单，只用抬头往上看就可以了。</p><p>第二层，知道坑有多深。知道这个世界最深的坑在哪里，最穷的地方，最黑暗的人心，最贫困的家庭，最阴暗的角落有多么潮湿。到这里，已经大部分人做不到了。因为黑暗的地方无法远观，需要身体力行的走下去，待在别人的泥沼里去体会他人的苦难。知道这个世界的下限不是教科书上写的应然，而是人间烟火中那些走投的无路实然。</p><p>第三层，知道我在哪里。天高三万丈，地深三万仞，人身7尺不足，我们在这天地之间处于何处？这个看起来很简单，实际非常难，因为我们会被自己迷惑。我们有时候会被眼前的成就而膨胀，而忘了自己只是站在高处并不会飞翔；有时候又会被身边的困顿打压盲目自卑，对那些生活在世界更底层的人视而不见。“知道我在哪”，其实已经解答了人生的三个终极问题之一。“知道我在哪”，意味着知道了自己的起点，同时意味着知道了自己的边界。人生不再会盲目追求虚妄，亦不会随处自我放逐；不追求最高，不自暴自弃，知道用怎样的力道生活，能得到最适合自己的结果。这样的人已是开了天眼，得了大智慧。万里挑一。</p><p>第四层，知道世界还有左右。这世界不只天高地迴的上下之分，还有三千大世界的芸芸众生。这个世界不只有高矮，不是一维的一条线，而是无穷大的三维世界。这世界所有众生皆不相同，他们不在我们上下，而更多在我们左右。每一种世相都有它存在的理由，每一种存在都有它的阴暗和美好。充分包容每个人的不同，充分理解每一种存在，为他人的欢喜而欢喜，为他人的悲伤而悲伤。不再追求高矮，而去追求阅尽这繁华世界，沉浸于人间烟火，普度众生。这一层的人，一千年能出一个。</p><p>尽量向上看的足够高，尽力向下走的足够深，尽我所能心如明镜知道自己在哪，尽心理解左右芸芸众生。能做多少做多少。所谓世面，就是世界的每一面。</p><h2 id="S2-2024-03-09"><a href="#S2-2024-03-09" class="headerlink" title="S2 - 2024.03.09"></a>S2 - 2024.03.09</h2><p><a href="https://www.zhihu.com/question/543427403/answer/3360091604">@知乎用户:枫晚流霞</a></p><p>如果你在实验室，走在了最前面，前方风雨交加电闪雷鸣，举目四顾，天苍地芒间，全是年级比你低的小孩在后面顺着你的脚印往前走，没有一个能在你前面让你踩着他的脚印走的人的时候，你真的希望前方有一个人，你一叫他“师兄”，他就回头丢给你一个灿烂的笑容说，“没事，我顶前面呢。”</p>]]></content>
    
    
    <summary type="html">谨以此文记录网络中所见之震撼。</summary>
    
    
    
    
    <category term="Literature" scheme="http://remoder.github.io/tags/Literature/"/>
    
  </entry>
  
  <entry>
    <title>IoT Learning: Multi Devices on One Board</title>
    <link href="http://remoder.github.io/Multi-Devices-on-One-Board.html"/>
    <id>http://remoder.github.io/Multi-Devices-on-One-Board.html</id>
    <published>2023-03-11T06:13:08.000Z</published>
    <updated>2023-06-26T16:58:22.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Part-1-思路介绍"><a href="#Part-1-思路介绍" class="headerlink" title="Part 1: 思路介绍"></a>Part 1: 思路介绍</h1><p>于 <a href="https://remoder.github.io/Turn-on-PC-by-WoL.html">WoL唤醒电脑</a> 的代码基础上，添加舵机，实现远程开关宿舍灯光功能。</p><p>Blinker 连接小爱同学时选择多功能插座，获取多设备相应方式，然后通过训练小爱同学完成语音指令的对应。</p><h1 id="Part-2-代码实现"><a href="#Part-2-代码实现" class="headerlink" title="Part 2: 代码实现"></a>Part 2: 代码实现</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Author: ReModer</span></span><br><span class="line"><span class="comment">  Date: 12/03/2023</span></span><br><span class="line"><span class="comment">  Func: To realize WoL and Auto-Light-Button By Blinker. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLINKER_WIFI</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLINKER_MIOT_LIGHT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFiUdp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Blinker.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Servo.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *auth = <span class="string">&quot;***&quot;</span>; <span class="comment">// here is your blinker device secret key</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ssid = <span class="string">&quot;***&quot;</span>; <span class="comment">// here is your Wifi id</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *pswd = <span class="string">&quot;***&quot;</span>; <span class="comment">// here is your Wifi password</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Data about WoL</span></span><br><span class="line"><span class="type">int</span> port = <span class="number">6022</span>; <span class="comment">// every port from 1 to 25565 can be used</span></span><br><span class="line">byte preamble[] = &#123;<span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>&#125;; </span><br><span class="line">byte macAddress[] = &#123;<span class="number">0xB0</span>, <span class="number">0x25</span>, <span class="number">0xAA</span>, <span class="number">0x42</span>, <span class="number">0x8F</span>, <span class="number">0xCE</span>&#125;; <span class="comment">// **-**-**-** is your MAC Address</span></span><br><span class="line">IPAddress <span class="title function_">ip</span><span class="params">(<span class="number">192</span>, <span class="number">168</span>, <span class="number">1</span>, <span class="number">107</span>)</span>; <span class="comment">// IPAddress is a class with the only constructed function to describe an IP address</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// UDP</span></span><br><span class="line">WiFiUDP UDP;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Blinker Device</span></span><br><span class="line">BlinkerButton <span class="title function_">Button</span><span class="params">(<span class="string">&quot;TurnOnPC&quot;</span>)</span>; <span class="comment">// The name should be samed as the name on APP</span></span><br><span class="line">BlinkerButton <span class="title function_">PreLight</span><span class="params">(<span class="string">&quot;PreLight&quot;</span>)</span>;</span><br><span class="line">BlinkerButton <span class="title function_">SufLight</span><span class="params">(<span class="string">&quot;SufLight&quot;</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Servo IDs</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> turnOnServoPin = <span class="number">4</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> turnOffServoPin = <span class="number">5</span>;</span><br><span class="line">Servo turnOnServo, turnOffServo;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UDPSendPacket</span><span class="params">(IPAddress ip, <span class="type">int</span> port)</span>&#123;</span><br><span class="line">  UDP.beginPacket(ip, port);</span><br><span class="line">  UDP.write(preamble, <span class="keyword">sizeof</span>(preamble));</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    UDP.write(macAddress, <span class="keyword">sizeof</span>(macAddress));</span><br><span class="line">  UDP.endPacket();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ButtonCallback</span><span class="params">(<span class="type">const</span> String &amp; state)</span>&#123;</span><br><span class="line">  BLINKER_LOG(<span class="string">&quot;get button state: &quot;</span>, state);</span><br><span class="line">  UDPSendPacket(ip, port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ********** About Servo ********** */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">spin</span><span class="params">(<span class="type">char</span> ch, <span class="type">int</span> op)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ch == <span class="string">&#x27;p&#x27;</span> || ch == <span class="string">&#x27;P&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">0</span>)&#123;</span><br><span class="line">      turnOffServo.write(<span class="number">92</span>);</span><br><span class="line">      delay(<span class="number">500</span>);</span><br><span class="line">      turnOffServo.write(<span class="number">81</span>);</span><br><span class="line">      Serial.println(<span class="string">&quot;前灯关&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      turnOnServo.write(<span class="number">63</span>);</span><br><span class="line">      delay(<span class="number">500</span>);</span><br><span class="line">      turnOnServo.write(<span class="number">81</span>);</span><br><span class="line">      Serial.println(<span class="string">&quot;前灯开&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;s&#x27;</span> || ch == <span class="string">&#x27;S&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">0</span>)&#123;</span><br><span class="line">      turnOffServo.write(<span class="number">63</span>);</span><br><span class="line">      delay(<span class="number">500</span>);</span><br><span class="line">      turnOffServo.write(<span class="number">81</span>);</span><br><span class="line">      Serial.println(<span class="string">&quot;后灯关&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      turnOnServo.write(<span class="number">95</span>);</span><br><span class="line">      delay(<span class="number">500</span>);</span><br><span class="line">      turnOnServo.write(<span class="number">81</span>);</span><br><span class="line">      Serial.println(<span class="string">&quot;后灯开&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreLightCallback</span><span class="params">(<span class="type">const</span> String &amp; state)</span>&#123;</span><br><span class="line">  BLINKER_LOG(<span class="string">&quot;get button state: &quot;</span>, state);</span><br><span class="line">  <span class="keyword">if</span> (state == BLINKER_CMD_ON)&#123;</span><br><span class="line">    spin(<span class="string">&#x27;p&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    PreLight.print(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">    BlinkerMIOT.powerState(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">    BlinkerMIOT.print();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == BLINKER_CMD_OFF)&#123;</span><br><span class="line">    spin(<span class="string">&#x27;p&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    PreLight.print(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">    BlinkerMIOT.powerState(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">    BlinkerMIOT.print();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SufLightCallback</span><span class="params">(<span class="type">const</span> String &amp; state)</span>&#123;</span><br><span class="line">  BLINKER_LOG(<span class="string">&quot;get button state: &quot;</span>, state);</span><br><span class="line">  <span class="keyword">if</span> (state == BLINKER_CMD_ON)&#123;</span><br><span class="line">    spin(<span class="string">&#x27;s&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    SufLight.print(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">    BlinkerMIOT.powerState(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">    BlinkerMIOT.print();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == BLINKER_CMD_OFF)&#123;</span><br><span class="line">    spin(<span class="string">&#x27;s&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    SufLight.print(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">    BlinkerMIOT.powerState(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">    BlinkerMIOT.print();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">miotMode</span><span class="params">(<span class="type">uint8_t</span> mode)</span>&#123;</span><br><span class="line">  BLINKER_LOG(<span class="string">&quot;need set mode: &quot;</span>, mode);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (mode == BLINKER_CMD_MIOT_DAY)&#123;</span><br><span class="line">    UDPSendPacket(ip, port);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode == BLINKER_CMD_MIOT_NIGHT)&#123;</span><br><span class="line">    spin(<span class="string">&#x27;p&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    PreLight.print(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode == BLINKER_CMD_MIOT_COLOR)&#123;</span><br><span class="line">    spin(<span class="string">&#x27;p&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    PreLight.print(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode == BLINKER_CMD_MIOT_WARMTH)&#123;</span><br><span class="line">    spin(<span class="string">&#x27;s&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    SufLight.print(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode == BLINKER_CMD_MIOT_TV)&#123;</span><br><span class="line">    spin(<span class="string">&#x27;s&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    SufLight.print(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode == BLINKER_CMD_MIOT_READING)&#123;</span><br><span class="line">    spin(<span class="string">&#x27;p&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    spin(<span class="string">&#x27;s&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    PreLight.print(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">    SufLight.print(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode == BLINKER_CMD_MIOT_COMPUTER)&#123;</span><br><span class="line">    spin(<span class="string">&#x27;p&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    spin(<span class="string">&#x27;s&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    PreLight.print(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">    SufLight.print(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  BlinkerMIOT.mode(mode);</span><br><span class="line">  BlinkerMIOT.print();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  BLINKER_DEBUG.stream(Serial);</span><br><span class="line"></span><br><span class="line">  Blinker.begin(auth, ssid, pswd);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// assign port</span></span><br><span class="line">  UDP.begin(port);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Servo attach</span></span><br><span class="line">  turnOnServo.attach(turnOnServoPin, Servo::CHANNEL_NOT_ATTACHED, <span class="number">45</span>, <span class="number">120</span>);</span><br><span class="line">  turnOffServo.attach(turnOffServoPin, Servo::CHANNEL_NOT_ATTACHED, <span class="number">45</span>, <span class="number">120</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// CallBack</span></span><br><span class="line">  Button.attach(ButtonCallback);</span><br><span class="line">  PreLight.attach(PreLightCallback);</span><br><span class="line">  SufLight.attach(SufLightCallback);</span><br><span class="line">  BlinkerMIOT.attachMode(miotMode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  Blinker.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">借助 ESP32 平台，接入小爱同学语音控制，完成宿舍灯光的控制。此次与 WoL 唤醒采用了同一个板子，需要特别注意 Blinker 多设备控制的方法。</summary>
    
    
    
    
    <category term="IoT" scheme="http://remoder.github.io/tags/IoT/"/>
    
    <category term="ESP32" scheme="http://remoder.github.io/tags/ESP32/"/>
    
    <category term="Arduino" scheme="http://remoder.github.io/tags/Arduino/"/>
    
    <category term="blinker" scheme="http://remoder.github.io/tags/blinker/"/>
    
  </entry>
  
  <entry>
    <title>IoT Learning: Turn On PC by WoL</title>
    <link href="http://remoder.github.io/Turn-on-PC-by-WoL.html"/>
    <id>http://remoder.github.io/Turn-on-PC-by-WoL.html</id>
    <published>2023-03-10T10:17:58.000Z</published>
    <updated>2023-06-26T16:58:22.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Part-1-思路介绍"><a href="#Part-1-思路介绍" class="headerlink" title="Part 1: 思路介绍"></a>Part 1: 思路介绍</h1><p>WoL (Wake On Lan)，即从局域网唤醒电脑，亦或配合路由器远程唤醒。具体过程在于，透过局域网设备对电脑网卡发送命令，使其从休眠或关机状态唤醒转换成开机状态。  </p><p>通过 ESP32 设备向电脑端口发送命令通信，激活 WoL 便可实现开机。同时，为便利生活，考虑借助 <a href="https://diandeng.tech/">点灯科技</a> 将 ESP32 设备接入小爱同学以进行语音控制。</p><h1 id="Part-2-准备工作"><a href="#Part-2-准备工作" class="headerlink" title="Part 2: 准备工作"></a>Part 2: 准备工作</h1><ol><li><a href>搭建 Aruidno + ESP32 开发环境</a></li><li><a href="https://post.smzdm.com/p/a7d70m4g/">开启电脑的 WoL 功能</a></li><li><a href="https://diandeng.tech/doc/getting-start-esp32-wifi">安装 blinker 库</a></li></ol><h1 id="Part-3-编写代码"><a href="#Part-3-编写代码" class="headerlink" title="Part 3: 编写代码"></a>Part 3: 编写代码</h1><h2 id="通过-UDP-进行通信实现-WoL-功能"><a href="#通过-UDP-进行通信实现-WoL-功能" class="headerlink" title="通过 UDP 进行通信实现 WoL 功能"></a>通过 UDP 进行通信实现 WoL 功能</h2><p>假设被唤醒的 PC 网卡 MAC 地址为：<code>01 02 03 04 05 06</code>，则 WoL 魔法包的结构即为：<code>FF FF FF FF FF FF | 01 02 03 04 05 06 ...(Repeat for 16 times totally)... 01 02 03 04 05 06</code>。  </p><p>其中头部 <code>FF FF FF FF FF FF</code> 固定不变，后部为 MAC 地址的十六次重复。有时数据包还会紧接着4-6字节的密码信息，本文中设为空。</p><p>将此数据包由任意空闲端口发送至目标计算机即可唤醒。</p><p>代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Author: ReModer</span></span><br><span class="line"><span class="comment">  Date: 10/03/2023</span></span><br><span class="line"><span class="comment">  Func: To realize WoL By Blinker. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFiUdp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ssid = <span class="string">&quot;***&quot;</span>; <span class="comment">// here is your Wifi id</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *pswd = <span class="string">&quot;***&quot;</span>; <span class="comment">// here is your Wifi password</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Data about WoL</span></span><br><span class="line"><span class="type">int</span> port = **; <span class="comment">// every port from 1 to 25565 can be used</span></span><br><span class="line">byte preamble[] = &#123;<span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>&#125;; </span><br><span class="line">byte macAddress[] = &#123;<span class="number">0</span>x**, <span class="number">0</span>x**, <span class="number">0</span>x**, <span class="number">0</span>x**, <span class="number">0</span>x**, <span class="number">0</span>x**&#125;; <span class="comment">// **-**-**-** is your MAC Address</span></span><br><span class="line">IPAddress <span class="title function_">ip</span><span class="params">(**, **, **, **)</span>; <span class="comment">// IPAddress is a class with the only constructed function to describe an IP address</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// UDP</span></span><br><span class="line">WiFiUDP UDP;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UDPSendPacket</span><span class="params">(IPAddress ip, <span class="type">int</span> port)</span>&#123;</span><br><span class="line">  UDP.beginPacket(ip, port);</span><br><span class="line">  UDP.write(preamble, <span class="keyword">sizeof</span>(preamble));</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    UDP.write(macAddress, <span class="keyword">sizeof</span>(macAddress));</span><br><span class="line">  UDP.endPacket();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// init WIFI driver</span></span><br><span class="line">  WiFi.mode(WIFI_STA);</span><br><span class="line">  WiFi.begin(ssid, pswd);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// assign port</span></span><br><span class="line">  UDP.begin(port);</span><br><span class="line"></span><br><span class="line">  Serial.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  Serial.println(<span class="string">&quot;... Start Successfully ...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  UDPSendPacket(ip, port);</span><br><span class="line">  Serial.println(<span class="string">&quot;Send succesfully once again.&quot;</span>);</span><br><span class="line">  delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然，我们不需要一次次重启电脑来验证程序，可以利用 <a href="https://www.depicus.com/wake-on-lan/wake-on-lan-monitor">Wake on Lan Monitor</a> 验证数据包是否传输成功，保证端口号一致即可。</p><h2 id="连接-blinker-实现手机端-APP-操控"><a href="#连接-blinker-实现手机端-APP-操控" class="headerlink" title="连接 blinker 实现手机端 APP 操控"></a>连接 blinker 实现手机端 APP 操控</h2><p>添加 blinker 相关部分即可，基本没难度，可以去参考 <a href="https://diandeng.tech/doc">官方文档</a>。</p><p>如果不追求语音控制的话，到这一步其实已经可以结束了。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Author: ReModer</span></span><br><span class="line"><span class="comment">  Date: 10/03/2023</span></span><br><span class="line"><span class="comment">  Func: To realize WoL By Blinker. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLINKER_WIFI</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFiUdp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Blinker.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *auth = <span class="string">&quot;***&quot;</span>; <span class="comment">// here is your blinker device secret key</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ssid = <span class="string">&quot;***&quot;</span>; <span class="comment">// here is your Wifi id</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *pswd = <span class="string">&quot;***&quot;</span>; <span class="comment">// here is your Wifi password</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Data about WoL</span></span><br><span class="line"><span class="type">int</span> port = **; <span class="comment">// every port from 1 to 25565 can be used</span></span><br><span class="line">byte preamble[] = &#123;<span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>&#125;; </span><br><span class="line">byte macAddress[] = &#123;<span class="number">0</span>x**, <span class="number">0</span>x**, <span class="number">0</span>x**, <span class="number">0</span>x**, <span class="number">0</span>x**, <span class="number">0</span>x**&#125;; <span class="comment">// **-**-**-** is your MAC Address</span></span><br><span class="line">IPAddress <span class="title function_">ip</span><span class="params">(**, **, **, **)</span>; <span class="comment">// IPAddress is a class with the only constructed function to describe an IP address</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// UDP</span></span><br><span class="line">WiFiUDP UDP;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Blinker Device</span></span><br><span class="line">BlinkerButton <span class="title function_">Button</span><span class="params">(<span class="string">&quot;TurnOnPC&quot;</span>)</span>; <span class="comment">// The name should be samed as the name on APP</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UDPSendPacket</span><span class="params">(IPAddress ip, <span class="type">int</span> port)</span>&#123;</span><br><span class="line">  UDP.beginPacket(ip, port);</span><br><span class="line">  UDP.write(preamble, <span class="keyword">sizeof</span>(preamble));</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    UDP.write(macAddress, <span class="keyword">sizeof</span>(macAddress));</span><br><span class="line">  UDP.endPacket();</span><br><span class="line"></span><br><span class="line">  Serial.println(<span class="string">&quot;Send succesfully once again.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ButtonCallback</span><span class="params">(<span class="type">const</span> String &amp; state)</span>&#123;</span><br><span class="line">  BLINKER_LOG(<span class="string">&quot;get button state: &quot;</span>, state);</span><br><span class="line">  UDPSendPacket(ip, port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  BLINKER_DEBUG.stream(Serial);</span><br><span class="line"></span><br><span class="line">  Blinker.begin(auth, ssid, pswd);</span><br><span class="line">  Button.attach(ButtonCallback);</span><br><span class="line"></span><br><span class="line">  UDP.begin(port);</span><br><span class="line"></span><br><span class="line">  Serial.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  Serial.println(<span class="string">&quot;... Start Successfully ...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  Blinker.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="接入小爱同学实现语音控制"><a href="#接入小爱同学实现语音控制" class="headerlink" title="接入小爱同学实现语音控制"></a>接入小爱同学实现语音控制</h2><p>按照 <a href="https://diandeng.tech/doc/xiaoai">Blinker 设备接入小爱同学</a> 所讲，加入插座类部分即可，注意回调函数与及时反馈。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Author: ReModer</span></span><br><span class="line"><span class="comment">  Date: 10/03/2023</span></span><br><span class="line"><span class="comment">  Func: To realize WoL By Blinker. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLINKER_WIFI</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLINKER_MIOT_OUTLET</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFiUdp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Blinker.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *auth = <span class="string">&quot;3d1d35761f0a&quot;</span>; <span class="comment">// here is your blinker device secret key</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ssid = <span class="string">&quot;是你蹭不到的&quot;</span>; <span class="comment">// here is your Wifi id</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *pswd = <span class="string">&quot;sncbdd330&quot;</span>; <span class="comment">// here is your Wifi password</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Data about WoL</span></span><br><span class="line"><span class="type">int</span> port = <span class="number">6022</span>; <span class="comment">// every port from 1 to 25565 can be used</span></span><br><span class="line">byte preamble[] = &#123;<span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>&#125;; </span><br><span class="line">byte macAddress[] = &#123;<span class="number">0xB0</span>, <span class="number">0x25</span>, <span class="number">0xAA</span>, <span class="number">0x42</span>, <span class="number">0x8F</span>, <span class="number">0xCE</span>&#125;; <span class="comment">// **-**-**-** is your MAC Address</span></span><br><span class="line">IPAddress <span class="title function_">ip</span><span class="params">(<span class="number">192</span>, <span class="number">168</span>, <span class="number">1</span>, <span class="number">107</span>)</span>; <span class="comment">// IPAddress is a class with the only constructed function to describe an IP address</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// UDP</span></span><br><span class="line">WiFiUDP UDP;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Blinker Device</span></span><br><span class="line">BlinkerButton <span class="title function_">Button</span><span class="params">(<span class="string">&quot;TurnOnPC&quot;</span>)</span>; <span class="comment">// The name should be samed as the name on APP</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UDPSendPacket</span><span class="params">(IPAddress ip, <span class="type">int</span> port)</span>&#123;</span><br><span class="line">  UDP.beginPacket(ip, port);</span><br><span class="line">  UDP.write(preamble, <span class="keyword">sizeof</span>(preamble));</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    UDP.write(macAddress, <span class="keyword">sizeof</span>(macAddress));</span><br><span class="line">  UDP.endPacket();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ButtonCallback</span><span class="params">(<span class="type">const</span> String &amp; state)</span>&#123;</span><br><span class="line">  BLINKER_LOG(<span class="string">&quot;get button state: &quot;</span>, state);</span><br><span class="line">  UDPSendPacket(ip, port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">miotPowerState</span><span class="params">(<span class="type">const</span> String &amp; state)</span>&#123;</span><br><span class="line">  BLINKER_LOG(<span class="string">&quot;need set power state: &quot;</span>, state);</span><br><span class="line">  <span class="keyword">if</span> (state == BLINKER_CMD_ON)&#123;</span><br><span class="line">    UDPSendPacket(ip, port);</span><br><span class="line">    BlinkerMIOT.powerState(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">    BlinkerMIOT.print();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == BLINKER_CMD_OFF)&#123;</span><br><span class="line">    BlinkerMIOT.powerState(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">    BlinkerMIOT.print();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  BLINKER_DEBUG.stream(Serial);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Blinker.begin(auth, ssid, pswd);</span><br><span class="line">  Button.attach(ButtonCallback);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// assign port</span></span><br><span class="line">  UDP.begin(port);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// CallBack</span></span><br><span class="line">  BlinkerMIOT.attachPowerState(miotPowerState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  Blinker.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Part-4-参考资料"><a href="#Part-4-参考资料" class="headerlink" title="Part 4: 参考资料"></a>Part 4: 参考资料</h1><p><a href="https://www.jianshu.com/p/22cbb5e9036a">玩转WakeOnLan(远程开机)</a>  </p><p><a href="https://blog.csdn.net/weixin_33739523/article/details/92981370">Python WOL/WakeOnLan/网络唤醒数据包发送工具</a></p><p><a href="https://cloud.tencent.com/developer/article/1352026#">网络唤醒(WOL)全解指南：原理篇</a></p><p><a href="https://blog.csdn.net/Naisu_kun/article/details/86300456">使用Arduino开发ESP32（04）：UDP通讯使用说明</a></p><p><a href="https://zhuanlan.zhihu.com/p/87212242">小爱同学+ESP8266-01S控制家里的灯（Blinker接入）</a></p><p><a href="https://zhuanlan.zhihu.com/p/93143539">小爱同学+ESP8266+手机APP远程开启电脑</a></p><p><a href="https://github.com/tty228/udp_turn_off">小爱同学使用 esp32 网络唤醒电脑、关闭电脑</a></p>]]></content>
    
    
    <summary type="html">借助 ESP32 平台，接入小爱同学语音控制，以通过 WoL 对电脑进行远程唤醒。</summary>
    
    
    
    
    <category term="IoT" scheme="http://remoder.github.io/tags/IoT/"/>
    
    <category term="ESP32" scheme="http://remoder.github.io/tags/ESP32/"/>
    
    <category term="Arduino" scheme="http://remoder.github.io/tags/Arduino/"/>
    
    <category term="blinker" scheme="http://remoder.github.io/tags/blinker/"/>
    
    <category term="Wake on Lan" scheme="http://remoder.github.io/tags/Wake-on-Lan/"/>
    
  </entry>
  
  <entry>
    <title>Python_Spider_Tutorials</title>
    <link href="http://remoder.github.io/python-spider-tutorials.html"/>
    <id>http://remoder.github.io/python-spider-tutorials.html</id>
    <published>2022-10-08T14:55:27.000Z</published>
    <updated>2023-06-26T16:58:22.372Z</updated>
    
    <content type="html"><![CDATA[<p>声明：学习资料来源于<a href="https://github.com/wistbean/learn_python3_spider">wistbean’s github</a></p><h1 id="Part-1-理论基础"><a href="#Part-1-理论基础" class="headerlink" title="Part 1: 理论基础"></a>Part 1: 理论基础</h1><h2 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h2><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h3><p><code>www.xxxxx.com/s?xx=yyyyy&amp;xx=yyyyy</code>，<code>?</code>后即为<strong>键值对</strong>形式的请求参数。  </p><h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h3><p>以<code>Form</code>表单方式提交参数的请求，参数一般在<code>request body</code>里面。  </p><ul><li>请求头 Request Header<br>包含一些 <code>HTTP请求</code> 的头部信息，如<code>Accept</code>, <code>Host</code>, <code>cookie</code>, <code>User-Agent</code>。  </li><li>响应头 Response Header</li><li>响应体 Response Body<br>服务器返回的数据。  </li></ul><h1 id="Part-2-通过-Fiddler-进行手机抓包"><a href="#Part-2-通过-Fiddler-进行手机抓包" class="headerlink" title="Part 2: 通过 Fiddler 进行手机抓包"></a>Part 2: 通过 Fiddler 进行手机抓包</h1><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><ol><li>配置浏览器代理<br>浏览器 - 设置 - 高级 - 打开代理设置 - IP<code>127.0.0.1</code> 端口<code>8888</code>  </li><li>安装 HTTPs 证书<br>Fiddler - Tools - Options - HTTPS - 勾选 <code>Decrypt HTTPS traffic</code> - Actions - <code>Reset All Certificates</code></li><li>下载证书<br>浏览器输入<code>localhost:8888</code>，点击<code>FiddlerRoot certificate</code>下载证书。</li><li>设置 Fiddler<br>设置<code>Fiddler Classiclistens onport: 8888</code>；<br>勾选<code>Act as system proxy on startup</code>, <code>Monitor all connections</code>, <code>Allow remote computers to connect</code>, <code>Reuse client connections</code>, <code>Reuse server connections</code> ,<code>DefaultLan及本框所有</code>。</li><li><strong>重启电脑</strong></li><li>手机连接统一 WIFI，浏览器进入<code>[IPv4地址]:8888</code>，点击<code>FiddlerRoot certificate</code>下载证书。</li><li><strong>仅针对iPhone，Android跳过此步。</strong>设置 - 通用 - 关于本机 - 证书信任设置 - 勾上刚下载的证书。  </li></ol><p><font color="red">此节暂时终止，原因为手机添加代理后无法上网，且未解决<code>Tunnel To 443</code>问题。</font></p><h1 id="Part-3-第三方库"><a href="#Part-3-第三方库" class="headerlink" title="Part 3: 第三方库"></a>Part 3: 第三方库</h1><h2 id="Urllib-库的使用"><a href="#Urllib-库的使用" class="headerlink" title="Urllib 库的使用"></a>Urllib 库的使用</h2><ul><li><p>requset 模块</p><blockquote><p>主要作用：发起请求  </p></blockquote><ul><li><code>urllib.request.urlopen(url, data=None, [timeout,]*)</code><br>默认是 <code>Get</code> 请求，传入参数 <code>data</code> 后成为 <code>POST</code> 请求。 </li><li><code>urllib.request.Request(url, data=None, headers=&#123;&#125;, method=None)</code><br>此函数可以传入<code>请求头信息</code>了。</li></ul></li><li><p>error 模块</p><blockquote><p>主要作用：异常处理</p></blockquote></li><li><p>parse 模块</p><blockquote><p>解析 URL 地址</p></blockquote></li><li><p>robotparser</p><blockquote><p>解析 robot.txt</p></blockquote></li></ul><h2 id="Request-库的使用"><a href="#Request-库的使用" class="headerlink" title="Request 库的使用"></a>Request 库的使用</h2><p>比 <code>Urllib</code> 简单得多，推荐首选。</p><p>使用自行查找(官方文档)[<a href="https://requests.readthedocs.io/en/latest/]%E3%80%82">https://requests.readthedocs.io/en/latest/]。</a></p><h1 id="Part-4-正则表达式"><a href="#Part-4-正则表达式" class="headerlink" title="Part 4: 正则表达式"></a>Part 4: 正则表达式</h1><p>(Github 教程)[<a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md#learn-regex]">https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md#learn-regex]</a><br>(re 库)[<a href="https://docs.python.org/3/library/re.html]">https://docs.python.org/3/library/re.html]</a></p>]]></content>
    
    
    <summary type="html">爬虫学习过程的笔记。</summary>
    
    
    
    
    <category term="Python" scheme="http://remoder.github.io/tags/Python/"/>
    
    <category term="Spider" scheme="http://remoder.github.io/tags/Spider/"/>
    
  </entry>
  
  <entry>
    <title>辩论进阶途径剖析</title>
    <link href="http://remoder.github.io/debate-skill-ways.html"/>
    <id>http://remoder.github.io/debate-skill-ways.html</id>
    <published>2021-12-21T15:30:09.000Z</published>
    <updated>2023-06-26T16:58:22.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="最好方法"><a href="#最好方法" class="headerlink" title="最好方法"></a>最好方法</h2><p>找个靠谱的人带着！！！</p><h2 id="一些网课"><a href="#一些网课" class="headerlink" title="一些网课"></a>一些网课</h2><p><a href="https://link.zhihu.com/?target=http://open.163.com/movie/2015/8/Q/S/MAUUPD810_MAV6D2AQS.html">周帅《辩论-说服的艺术》</a></p><h2 id="一些文章"><a href="#一些文章" class="headerlink" title="一些文章"></a>一些文章</h2><p><a href="https://www.zhihu.com/question/35258771/answer/61934470">辩论赛的判准发展</a><br><a href="https://www.zhihu.com/question/31637556/answer/52770107">辩论技术流的发展</a><br><a href="https://zhuanlan.zhihu.com/p/45159176">请教学长姐的姿势</a></p><h2 id="一些工具"><a href="#一些工具" class="headerlink" title="一些工具"></a>一些工具</h2><p><a href="http://www.guoxuedashi.net/">国学大师-查询字词成语</a></p><h2 id="一些课本"><a href="#一些课本" class="headerlink" title="一些课本"></a>一些课本</h2><p><a href="/download/%E8%B6%85%E7%BA%A7%E8%BE%A9%E6%89%8B%C2%B7%E8%BE%A9%E8%AE%BA%E9%80%9A%E8%AF%86%E8%AF%BE%E6%9C%AC.pdf">超辩通识课本</a><br><a href="/download/%E9%BB%84%E6%89%A7%E4%B8%AD%E5%8D%9A%E5%AE%A2.pdf">黄执中博客pdf版</a><br><a href="/download/%E8%BE%A9%E8%AE%BA%E6%8F%90%E9%AB%98%E5%B0%8F%E5%86%8C%E5%AD%90-%E9%83%AD%E5%88%9D%E8%88%AA.pdf">郭初航辩论小册子</a></p><h1 id="提高"><a href="#提高" class="headerlink" title="提高"></a>提高</h1><h2 id="看比赛"><a href="#看比赛" class="headerlink" title="看比赛"></a>看比赛</h2><h3 id="看什么比赛"><a href="#看什么比赛" class="headerlink" title="看什么比赛"></a>看什么比赛</h3><h4 id="赛事"><a href="#赛事" class="headerlink" title="赛事"></a>赛事</h4><ul><li>国际华语辩论邀请赛</li><li>世界华语辩论锦标赛</li><li>华语辩论世界杯。</li></ul><h4 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h4><p><a href="https://www.zhihu.com/question/38107906">2015年度，最值得推荐的辩论赛视频有哪些？</a><br><a href="https://www.zhihu.com/question/23297032">有哪些经典的辩论赛视频可以推荐？</a></p><h3 id="怎么看比赛"><a href="#怎么看比赛" class="headerlink" title="怎么看比赛"></a>怎么看比赛</h3><ol><li>开始之前，写一些双方的基本思路。</li><li>多次听立论：<ol><li>分别记录双方的论点论据</li><li>其他辩位补充申论时完善</li></ol></li><li>记录交锋点：<ol><li>定义的交锋<ul><li>定义不同时双方说了什么</li><li>结辩时定义还不同的话如何处理</li></ul></li><li>判准的争夺<ul><li>如何去说服评委接受自己的判准</li></ul></li><li>论点的拆解 &amp; 论据的检证<ul><li>首质对对手的理论体系做了怎样的框定和拆解</li><li>论据提出后，双方做了什么相抗论据和补充解释</li><li>拆解论点和论证立场缺乏逻辑关系时说了什么</li></ul></li></ol></li><li>自由辩结束后，选择一个立场做结辩。<ol><li>重点在于总结战场，要梳理出对方漏洞和己方未结论点。</li><li>初始阶段时间可以稍微放宽，然后逐渐加到规定时间。 </li></ol></li><li>双方结辩后：<ol><li>回顾双方的理论体系</li><li>判断哪方论证残留度更高</li><li>观察视频中四辩的结辩框架</li><li>思考双方在理论时为何以这样的方式阐述论点</li></ol></li><li>评委点评时：<ol><li>对于双方论点的认知，与评委是否存在差异</li><li>对于双方交锋的胜负，与评委是否存在差异</li><li>注意评委的拆解与论证示范</li><li>于评委期待和视频中四辩比较自己的结辩</li></ol></li></ol><h2 id="打比赛"><a href="#打比赛" class="headerlink" title="打比赛"></a>打比赛</h2><h3 id="怎么备比赛"><a href="#怎么备比赛" class="headerlink" title="怎么备比赛"></a>怎么备比赛</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>定义的目的是<strong>确定战场</strong>，不是回避战场。有些空间是特意留给对方的，与其想怎么封死定义，不如想怎么面对争议。</li><li>辩题有争议是因为，在一般人的理解中，这个题目两边难以取舍，都合理。<br>打破的方法是<strong>新资讯</strong>或<strong>新观念</strong>。<ul><li>新资讯是说出一般人所不知道或没考虑到的得失，为天秤的一端加砝码。</li><li>新观念是重新诠释一般人的理解，从中挖出一层新意义。在砝码不变的情况下改变支点。</li></ul></li><li>定义对己方有利，不是说在此定义下我会赢，而是在此定义下辩题会有新意义，只是我方立场<strong>碰巧</strong>符合了这层新意义。</li></ul><h4 id="立论"><a href="#立论" class="headerlink" title="立论"></a>立论</h4><ol><li>查阅资料，收集双方的论点论据，做到在不看稿子的情况下能说清楚双方的主要观点。</li><li>对于己方论点要保证说20～30遍，用各种不同的方式。<ul><li>申论，反驳，提问，戏谑，归纳，类比，长篇大论</li><li>顺说，反说，从某个关键句引申</li><li>说给队友，说给自己，说给没有听过比赛的人</li></ul></li><li>想一想：<ul><li>我的立论到底是什么？</li><li>场上我传递给评委的立论是什么？</li><li>在我被对手干扰后，我传递到评委耳朵里的立论又还剩下了什么？</li></ul></li></ol><h3 id="怎么打比赛"><a href="#怎么打比赛" class="headerlink" title="怎么打比赛"></a>怎么打比赛</h3><ol><li>场上的记录<ul><li>学会用符号和关键词</li><li>梳理相关论点的前后逻辑</li><li>关注对面的“怪话”</li></ul></li><li>自由辩环节<ul><li>控场打法技巧<ul><li>起：说清楚问题逻辑，提出问题</li><li>追：追两三个同样逻辑的问题</li><li>结：把问题结论结一下，明确己方的战场成果</li><li>转：转到下一个问题，另一片战场</li></ul></li><li>用自己最强的辩手，盯防对方的王牌辩手，紧跟发言，抑制输出</li><li>揪住对方难以解释的点多次打击、连续追问简短问题，打乱对方节奏</li></ul></li><li>交锋的处理<ul><li>勿多条逻辑逼近</li><li>明确攻点和守点<ul><li>攻点：逻辑短，易论证，要优先打</li><li>守点：逻辑长，难论证，不主动打</li></ul></li><li>分清战场的优劣<ul><li>优势战场要获胜，追问攻击加短打</li><li>烈士战场求持平，解释防守并反问</li></ul></li></ul></li><li>辩位的申论<ol><li>一辩重在明确定义、提出标准、展开论点</li><li>二辩重在反驳对手论点，进一步补充论据</li><li>三遍明确前期交锋，提出自由辩的主战场</li><li>四辩重在梳理比赛，明确不同战场的胜负</li></ol></li><li>结辩的框架<ol><li>破框架<ul><li>按定义，标准，论点，价值的排序，做一个全面反驳</li><li>“第一，对方辩友的定义有偏差…<br>第二，对方辩友的比较标准不合理…<br>第三，对方辩友的论点不成立…<br>第四，对方辩友的价值不值得提倡…”</li><li><a href="www.bilibili.com/video/BV1zb41127aR">金钱是不是万恶之源(反四胡渐彪)</a> </li></ul></li><li>破分歧<ul><li>找到双方正常比赛最为核心的两到三个分歧，进行拆解和阐述</li><li>“今天这场比赛，我们双方达成了这几点共识…我们剩下最核心的分歧无非是…”</li><li><a href="https://www.bilibili.com/video/BV17s411K74B">21世纪青年人做加法/做减法更幸福(正四詹青云)</a></li></ul></li><li>破价值<ul><li>把对方所有的论点概括成一种价值倡导，然后进行反驳</li><li>“对方辩友今天说了很多…可是说到底他们都是在说一件事…他们所提倡的价值无非是…可是大家有没有想过…”</li><li><a href="https://www.bilibili.com/video/BV1Mx411A7nv">顺境和逆境何者更有助于人的成长(反四黄执中)</a></li></ul></li></ol></li><li>表达的要求<ul><li>好的表达不是一口气一大段话，而是像喂小孩子吃饭，一次一口，每次一小口，吃一下停一下，等他咀嚼。</li><li>我在念书时，怎么会知道我能否承受病人离开人世的压力？(×)<br> 我想当医生，但当我念完书后，发现自己怕见血，怎么办？(√)</li></ul></li><li>比赛的层次<ul><li>比赛的层次，一般是指双方间整体举证责任的推移，与辩士间指责切换的过程。</li><li>表达的层次，或者说叙事的顺序，才是个人所能努力的。<ul><li>辩手基本功：“对方刚说”法(单点钉单点)<ol><li>先引用对反的论点（对方刚才说xxxxx）</li><li>配一段己方反驳（但我方认为xxxxx）</li><li>接着换下一个论点（对方刚才又提出xxxxx）</li><li>然后再反驳（但我方却想问xxxxx）</li></ol></li><li>架构的核心是一套逻辑性的检证程序时：“退一步说”法(从点走到面)  <ol><li>提出一个标准（对方必须先证明xxxxx）</li><li>再做检证（但未必xxxxx）</li><li>退一层标准（退一步说，就算真的xxxxx）</li><li>再做检证（但也未必便xxxxx）</li><li>再退一层（再退一步说，就算真的xxxxx）</li><li>再做检证（但也未必就xxxxx）</li></ol></li><li>架构的关键在某个观念或定义的接受与否：“这个角度”法(头过身就过)  <ol><li>标出要突破的观念点（有个观点很有趣，就是xxxxx）</li><li>逐一请扫战场，提出诠释（让我们从这个角度看看今天场上的争论）</li><li>让每次诠释印证并加深大家对观念点的理解（对方之所以会那样说，只是因为他们不理解xxxxx） </li></ol></li><li>辩题讨论范围广，战场太分散，超出架构：“大意是说”法(抓大放小) <ol><li>先把性质相近的琐碎战场整理起来（对方刚才说xxxxx，大意就是在强调xxxxx）</li><li>各战场只归纳，不交锋（对方又说xxxxx，其实也是在说xxxxx）</li><li>最后合并出来，一次解决（所以今天的比赛说的只有一个事，那就是xxxxx） </li></ol></li></ul></li></ul></li></ol><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="构建辩论环境"><a href="#构建辩论环境" class="headerlink" title="构建辩论环境"></a>构建辩论环境</h2><ul><li><strong>微信公众号：</strong> online辩论</li></ul><h2 id="拓宽辩论思维"><a href="#拓宽辩论思维" class="headerlink" title="拓宽辩论思维"></a>拓宽辩论思维</h2><h3 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h3><ul><li><p>辩论相关</p><ul><li>《形式逻辑》金岳霖</li><li>《金字塔原理》芭芭拉·明托</li><li>《罗伯特议事规则》亨利·罗伯特</li><li>《认识辩论》游梓翔</li><li>《论辩史话》赵传栋</li><li>《简单逻辑学》丹尼斯·麦克伦尼 赵明燕译</li><li>《好好讲道理：反击谬误的逻辑学训练》爱德华·戴默 刀尔登译</li></ul></li><li><p>文史哲相关</p><ul><li>《西方哲学史》伯特兰·罗素</li><li>《中国哲学简史》冯友兰</li><li>《全球通史》</li><li>《二十四史》</li><li>《国史新论》</li><li>四大名著</li><li>金庸武侠</li></ul></li></ul>]]></content>
    
    
    <summary type="html">新生班选拔赛被暴打，决定进阶辩论能力，此文主要记录收集到的方法论。</summary>
    
    
    
    
    <category term="辩论" scheme="http://remoder.github.io/tags/%E8%BE%A9%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>博客诞生记</title>
    <link href="http://remoder.github.io/theBirthOfBlog.html"/>
    <id>http://remoder.github.io/theBirthOfBlog.html</id>
    <published>2021-06-24T15:07:53.000Z</published>
    <updated>2023-06-26T16:58:22.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="无中生有"><a href="#无中生有" class="headerlink" title="无中生有"></a>无中生有</h1><p>按着 <a href="https://adkcss.coding-pages.com/posts/6e8839eb.html#toc-heading-21">傻瓜式教程</a> 搭完了基础博客。</p><p>无脑按教程走，除了一点：Github 更新后 master 被改名为了 main，设置时要<strong>与时俱进</strong>。</p><p>另外，调整 <code>permalink</code> 的时候末尾要加上 <code>.html</code>，不然点击文章无法进入，而是下载。</p><h1 id="开始美化"><a href="#开始美化" class="headerlink" title="开始美化"></a>开始美化</h1><h3 id="挑选主题"><a href="#挑选主题" class="headerlink" title="挑选主题"></a>挑选主题</h3><p>经过长时间的对比，最终选择了 <a href="https://butterfly.js.org/">ButterFly</a>。</p><h3 id="完善主题"><a href="#完善主题" class="headerlink" title="完善主题"></a>完善主题</h3><ul><li>建立标签页</li><li>建立分类页</li><li>建立友链页<br>友链页代码段在教程中没有分段(似乎是我自己浏览器的问题)，现给出格式化后的代码：  </li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情鏈接</span></span><br><span class="line"><span class="attr">class_desc:</span> <span class="string">那些人，那些事</span></span><br><span class="line"><span class="attr">link_list:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">    <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">    <span class="attr">descr:</span> <span class="string">快速、簡單且強大的網誌框架</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">網站</span></span><br><span class="line"><span class="attr">class_desc:</span> <span class="string">值得推薦的網站</span></span><br><span class="line"><span class="attr">link_list:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Youtube</span></span><br><span class="line">    <span class="attr">link:</span> <span class="string">https://www.youtube.com/</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line">    <span class="attr">descr:</span> <span class="string">視頻網站</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Weibo</span></span><br><span class="line">    <span class="attr">link:</span> <span class="string">https://www.weibo.com/</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line">    <span class="attr">descr:</span> <span class="string">中國最大社交分享平台</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Twitter</span></span><br><span class="line">    <span class="attr">link:</span> <span class="string">https://twitter.com/</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line">    <span class="attr">descr:</span> <span class="string">社交分享平台</span></span><br></pre></td></tr></table></figure><ul><li><p>创建导航菜单</p><p><strong>主题配置文件</strong> 是指 <code>\themes\butterfly\_config.yml</code></p></li><li><p>修改代码风格</p><p>最终选择了 <code>mac</code></p></li><li><p>修改文章自动节选</p><p>最终选择了 <code>both</code></p></li><li><p>背景图片</p><p>主页选择了 <a href="https://api.dujin.org/bing/1920.php">必应每日一图</a><br>其他页面选择了 <a href="https://api.ixiaowai.cn/gqapi/gqapi.php">随机壁纸</a></p></li><li><p>更换头像</p><blockquote><p>不要把个人需要的文件/图片放在主题 source 文件夹里，因为在升级主题的过程中，可能会把文件覆盖删除了。在 Hexo 根目录的 source 文件夹里，创建一个文件夹来放置个人文件/图片。引用文件直接为<code>/文件夹名称/文件名</code></p></blockquote></li><li><p>建立评论系统</p><p>最终选择了 <code>gitalk</code></p></li><li><p>开启背景彩带</p></li><li><p>开启打字副标题</p></li></ul><h3 id="升级主题"><a href="#升级主题" class="headerlink" title="升级主题"></a>升级主题</h3><p>在主题目录下 <code>git pull</code></p><h1 id="博客迁移"><a href="#博客迁移" class="headerlink" title="博客迁移"></a>博客迁移</h1><p>进入大学换了新电脑，需要将博客文件迁移。</p><p>按照 <a href="https://www.zhihu.com/question/21193762/answer/103097754">迁移教程</a> 进行设置，中间又出现了很多错误。</p><h3 id="git-bash-中无法使用-npm"><a href="#git-bash-中无法使用-npm" class="headerlink" title="git bash 中无法使用 npm"></a>git bash 中无法使用 npm</h3><ul><li>保证进入到博客目录</li><li>重开 <code>git bash</code></li></ul><h3 id="git-无法连接到-github"><a href="#git-无法连接到-github" class="headerlink" title="git 无法连接到 github"></a>git 无法连接到 github</h3><p>要重新申请 <code>SSH Key</code>，重新设置连接的 <code>github</code> 账户密码。</p><h3 id="hexo-s-后显示-cannot-get"><a href="#hexo-s-后显示-cannot-get" class="headerlink" title="hexo s 后显示 cannot get"></a>hexo s 后显示 cannot get</h3><p>在博客根目录下运行 <code>npm install</code></p><h3 id="npm-install-出错"><a href="#npm-install-出错" class="headerlink" title="npm install 出错"></a>npm install 出错</h3><ul><li>更新 <code>npm</code></li><li>重开 <code>git bash</code></li></ul><h2 id="细节问题"><a href="#细节问题" class="headerlink" title="细节问题"></a>细节问题</h2><h3 id="导航菜单子级页面"><a href="#导航菜单子级页面" class="headerlink" title="导航菜单子级页面"></a>导航菜单子级页面</h3><ul><li><strong>目的</strong>  </li></ul><p>鼠标放在“<strong>日常</strong>”，拉下清单，点击“<strong>练字</strong>”，进入<strong>练字分类页</strong>。</p><ul><li><strong>措施</strong></li></ul><p>文章中 <code>categories: 练字</code><br>导航栏主题设置中 <code> - 练字: /categories/练字/</code></p><h3 id="上传后图片不显示"><a href="#上传后图片不显示" class="headerlink" title="上传后图片不显示"></a>上传后图片不显示</h3><ul><li><strong>目的</strong></li></ul><p>引用本地图片，上传后图片依然显示。</p><ul><li><strong>措施</strong></li></ul><p><code>npm install https://github.com/EricGerry/hexo-asset-image-0.0.5.git --save</code> 安装插件用来上传本地图片。</p><p>此时 <code>post</code> 中应 <code>cover: /img/calligraphy.jpg</code>，注意是 <code>/</code>。</p>]]></content>
    
    
    <summary type="html">博客的搭建记录</summary>
    
    
    
    
    <category term="Hexo" scheme="http://remoder.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
