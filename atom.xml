<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ReModer&#39;s Blog</title>
  
  <subtitle>都是风景，幸会</subtitle>
  <link href="http://remoder.github.io/atom.xml" rel="self"/>
  
  <link href="http://remoder.github.io/"/>
  <updated>2023-06-27T16:00:40.160Z</updated>
  <id>http://remoder.github.io/</id>
  
  <author>
    <name>ReModer</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CS61A-FA22 Learning Record</title>
    <link href="http://remoder.github.io/CS61A-Learning-Record.html"/>
    <id>http://remoder.github.io/CS61A-Learning-Record.html</id>
    <published>2023-06-27T08:05:18.000Z</published>
    <updated>2023-06-27T16:00:40.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言-amp-资源"><a href="#前言-amp-资源" class="headerlink" title="前言&amp;资源"></a>前言&amp;资源</h1><p>CS61A 是 Berkeley 大学针对其大一学生所开设的课程，并在互联网上做出了相当程度的透明分享。</p><p><a href="https://inst.eecs.berkeley.edu/~cs61a/archives.html">此处</a> 为 CS61A 课程汇总。</p><p>非校内学生存在一定局限性，其中无法访问的 Recording 可以在 Y2B 或 Bilibili 中寻找，Solution 可以在 Gtihub 中寻找。</p><p>课程中的 Lab 采用了 <code>ok</code> 系统进行检测，非其校内学生可以采用 <code>python3 ok --local</code> 的命令进行本地测试。</p><p>建议学习顺序为 <code>Textbook - Lecture - Lab &amp; Disscussion - Homework &amp; Project</code>。 </p><p>为同时学习 Linux 系统，笔者借助 <a href="https://learn.microsoft.com/zh-cn/windows/wsl/about">WSL</a>，于 Win10 中运行 Linux 进行课程学习。</p><h1 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h1><h2 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h2><h3 id="课程笔记"><a href="#课程笔记" class="headerlink" title="课程笔记"></a>课程笔记</h3><ol><li><p>Python 中的元素(Elements)  </p><ul><li><p>表达式(Expressions)<br>  符号表达式(Mathematical Expressions)，如 <code>1 + 2 / 3 * 4 // 5 % 6 ** 7</code><br>  调用表达式(Call Expressions)，如 <code>max(min(1, -2), min(pow(3, 5), -4))</code></p></li><li><p>函数(Functions)<br>  纯函数(Pure Function)，需满足两点：  </p><ul><li>函数的结果只与参数有关，即相同参数必然返回相同结果；  </li><li>在函数执行过程中，没有其他任何操作，也造不成任何影响。</li></ul><p>  非纯函数(Non-Pure Function)，会对其他元素造成影响的函数。  </p><p>  不难发现，纯函数具有很强的优越性：它与调用表达式工作更加融洽，它输出固定易于调试，它不受外部影响、更利于并行处理。</p></li><li><p>变量名(Names)与环境(the Environment)<br>  Python 代码运行于环境之中，而环境包含了许多框架。</p><p>  在不同框架中，可以存在相同的变量名而互不影响，即<strong>局部变量</strong>、<strong>全局变量</strong>。  </p><p>  在调用函数时，便会创立新的框架(Frame)，并优先在新建框架中检索变量，若无法找到，再返回上一级框架。可以发现，此处是<strong>栈</strong>的思想。  </p><p>  因而，  </p><pre><code class="python">def square(square):    return square * square</code></pre><p>  这样的代码是可行的，具体可见下段内容的分析。</p></li></ul></li><li><p>环境图(Environment Diagram)<br> 利用图示方式，将<strong>变量名与框架</strong>直观展现出来，即称为<strong>环境图</strong>。  </p><p> 于 <a href="https://pythontutor.com/python-debugger.html#mode=edit">环境图生成网站</a> 中运行代码  </p><pre><code class="python">def square(square):    return square * squaresquare(-2)</code></pre><p> 即可感受上文所提的<strong>框架栈</strong>。</p></li><li><p>嵌套调用表达式(Nested Call Expressions)的运行<br> Python 首先识别表达式的操作命令，即 <code>add mul</code> 等，而后去访问 <code>算子</code>，亦即函数中的参数。若算子仍为表达式，则继续识别操作命令，而后访问算子，直到两个算子都为数字为止。而后返回计算结果，返回计算结果，…，返回计算结果，最终得到答案。<br> 不难发现，这是一个递归的过程，若将每一步都画图示意，则可构建出一棵树。</p></li></ol>]]></content>
    
    
    <summary type="html">记录 CS61A-FA22 的学习过程。</summary>
    
    
    
    
    <category term="CS" scheme="http://remoder.github.io/tags/CS/"/>
    
    <category term="Python" scheme="http://remoder.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>网途启示录</title>
    <link href="http://remoder.github.io/cyber-apocalypto.html"/>
    <id>http://remoder.github.io/cyber-apocalypto.html</id>
    <published>2023-06-20T08:45:24.000Z</published>
    <updated>2023-06-26T16:58:22.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>得闲以思，接触互联网已有十余年之久。</p><p>鱼龙混杂、包罗万象之处，必有广量信息流通。<br>而在这宏大规模之内，亦必蕴瑰宝其中。</p><p>每每有幸读得他人优美之文，急不待反复咏诵、慕其风采；<br>每每有幸识得他人肺腑之言，总不忍潸然泪下、叹世无常；<br>每每有幸观得他人大义之举，又不止慷慨激昂、奋起疾呼；<br>每每有幸听得他人高远之见，恨不能登门造访、促膝长谈。</p><p>为时常回顾、亦作收藏，本文将记录<strong>笔者认为应被记录</strong>的内容，并标注出处来源。</p><p>考虑到可读性，目前本文采取周更的方式，并将更新日期作为目录，以便于查阅。后期可能会变更检索方式，以便于提供更好的体验。</p><p>本文自然多受局限，包括但不限于：</p><ol><li>无法找到原创作者，在有意或无意中标注转载者；</li><li>原文作者不愿被流传转载，却因某些缘故笔者不得知；</li><li>内容由笔者个人收录，数量上或许只能取其一瓢，质量上也是主观标准。</li></ol><p>对于局限一、局限二，欢迎读者的反馈，本文将会及时进行删改；<br>对于局限三，欢迎读者的分享，但主观标准无法统一，收录与否并无定数。<del>别杠，杠就是你对。</del><br>当然，这也意味着，读者亦可在评论区看到不同的观点，欢迎移步评论区。</p><hr><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="S1-2023-06-20"><a href="#S1-2023-06-20" class="headerlink" title="S1 - 2023.06.20"></a>S1 - 2023.06.20</h2><p><a href="https://www.zhihu.com/question/278071372/answer/397688750">@知乎用户:椰子大魔头</a></p><p>见过世面，有四层。</p><p>第一层，知道天有多高。知道这个世界的顶点在哪里，最好吃的食物，最贵的衣服，最富有的人，最奢华的生活是怎样，最远的地方有多美。大部分人的“见过世面”停留在这一层。也最简单，只用抬头往上看就可以了。</p><p>第二层，知道坑有多深。知道这个世界最深的坑在哪里，最穷的地方，最黑暗的人心，最贫困的家庭，最阴暗的角落有多么潮湿。到这里，已经大部分人做不到了。因为黑暗的地方无法远观，需要身体力行的走下去，待在别人的泥沼里去体会他人的苦难。知道这个世界的下限不是教科书上写的应然，而是人间烟火中那些走投的无路实然。</p><p>第三层，知道我在哪里。天高三万丈，地深三万仞，人身7尺不足，我们在这天地之间处于何处？这个看起来很简单，实际非常难，因为我们会被自己迷惑。我们有时候会被眼前的成就而膨胀，而忘了自己只是站在高处并不会飞翔；有时候又会被身边的困顿打压盲目自卑，对那些生活在世界更底层的人视而不见。“知道我在哪”，其实已经解答了人生的三个终极问题之一。“知道我在哪”，意味着知道了自己的起点，同时意味着知道了自己的边界。人生不再会盲目追求虚妄，亦不会随处自我放逐；不追求最高，不自暴自弃，知道用怎样的力道生活，能得到最适合自己的结果。这样的人已是开了天眼，得了大智慧。万里挑一。</p><p>第四层，知道世界还有左右。这世界不只天高地迴的上下之分，还有三千大世界的芸芸众生。这个世界不只有高矮，不是一维的一条线，而是无穷大的三维世界。这世界所有众生皆不相同，他们不在我们上下，而更多在我们左右。每一种世相都有它存在的理由，每一种存在都有它的阴暗和美好。充分包容每个人的不同，充分理解每一种存在，为他人的欢喜而欢喜，为他人的悲伤而悲伤。不再追求高矮，而去追求阅尽这繁华世界，沉浸于人间烟火，普度众生。这一层的人，一千年能出一个。</p><p>尽量向上看的足够高，尽力向下走的足够深，尽我所能心如明镜知道自己在哪，尽心理解左右芸芸众生。能做多少做多少。所谓世面，就是世界的每一面。</p><hr>]]></content>
    
    
    <summary type="html">谨以此文记录网络中所见之震撼。</summary>
    
    
    
    
    <category term="Literature" scheme="http://remoder.github.io/tags/Literature/"/>
    
  </entry>
  
  <entry>
    <title>IoT Learning: Multi Devices on One Board</title>
    <link href="http://remoder.github.io/Multi-Devices-on-One-Board.html"/>
    <id>http://remoder.github.io/Multi-Devices-on-One-Board.html</id>
    <published>2023-03-11T06:13:08.000Z</published>
    <updated>2023-06-26T16:58:22.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Part-1-思路介绍"><a href="#Part-1-思路介绍" class="headerlink" title="Part 1: 思路介绍"></a>Part 1: 思路介绍</h1><p>于 <a href="https://remoder.github.io/Turn-on-PC-by-WoL.html">WoL唤醒电脑</a> 的代码基础上，添加舵机，实现远程开关宿舍灯光功能。</p><p>Blinker 连接小爱同学时选择多功能插座，获取多设备相应方式，然后通过训练小爱同学完成语音指令的对应。</p><h1 id="Part-2-代码实现"><a href="#Part-2-代码实现" class="headerlink" title="Part 2: 代码实现"></a>Part 2: 代码实现</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Author: ReModer</span></span><br><span class="line"><span class="comment">  Date: 12/03/2023</span></span><br><span class="line"><span class="comment">  Func: To realize WoL and Auto-Light-Button By Blinker. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLINKER_WIFI</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLINKER_MIOT_LIGHT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFiUdp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Blinker.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Servo.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *auth = <span class="string">&quot;***&quot;</span>; <span class="comment">// here is your blinker device secret key</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ssid = <span class="string">&quot;***&quot;</span>; <span class="comment">// here is your Wifi id</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *pswd = <span class="string">&quot;***&quot;</span>; <span class="comment">// here is your Wifi password</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Data about WoL</span></span><br><span class="line"><span class="type">int</span> port = <span class="number">6022</span>; <span class="comment">// every port from 1 to 25565 can be used</span></span><br><span class="line">byte preamble[] = &#123;<span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>&#125;; </span><br><span class="line">byte macAddress[] = &#123;<span class="number">0xB0</span>, <span class="number">0x25</span>, <span class="number">0xAA</span>, <span class="number">0x42</span>, <span class="number">0x8F</span>, <span class="number">0xCE</span>&#125;; <span class="comment">// **-**-**-** is your MAC Address</span></span><br><span class="line">IPAddress <span class="title function_">ip</span><span class="params">(<span class="number">192</span>, <span class="number">168</span>, <span class="number">1</span>, <span class="number">107</span>)</span>; <span class="comment">// IPAddress is a class with the only constructed function to describe an IP address</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// UDP</span></span><br><span class="line">WiFiUDP UDP;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Blinker Device</span></span><br><span class="line">BlinkerButton <span class="title function_">Button</span><span class="params">(<span class="string">&quot;TurnOnPC&quot;</span>)</span>; <span class="comment">// The name should be samed as the name on APP</span></span><br><span class="line">BlinkerButton <span class="title function_">PreLight</span><span class="params">(<span class="string">&quot;PreLight&quot;</span>)</span>;</span><br><span class="line">BlinkerButton <span class="title function_">SufLight</span><span class="params">(<span class="string">&quot;SufLight&quot;</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Servo IDs</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> turnOnServoPin = <span class="number">4</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> turnOffServoPin = <span class="number">5</span>;</span><br><span class="line">Servo turnOnServo, turnOffServo;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UDPSendPacket</span><span class="params">(IPAddress ip, <span class="type">int</span> port)</span>&#123;</span><br><span class="line">  UDP.beginPacket(ip, port);</span><br><span class="line">  UDP.write(preamble, <span class="keyword">sizeof</span>(preamble));</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    UDP.write(macAddress, <span class="keyword">sizeof</span>(macAddress));</span><br><span class="line">  UDP.endPacket();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ButtonCallback</span><span class="params">(<span class="type">const</span> String &amp; state)</span>&#123;</span><br><span class="line">  BLINKER_LOG(<span class="string">&quot;get button state: &quot;</span>, state);</span><br><span class="line">  UDPSendPacket(ip, port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ********** About Servo ********** */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">spin</span><span class="params">(<span class="type">char</span> ch, <span class="type">int</span> op)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ch == <span class="string">&#x27;p&#x27;</span> || ch == <span class="string">&#x27;P&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">0</span>)&#123;</span><br><span class="line">      turnOffServo.write(<span class="number">92</span>);</span><br><span class="line">      delay(<span class="number">500</span>);</span><br><span class="line">      turnOffServo.write(<span class="number">81</span>);</span><br><span class="line">      Serial.println(<span class="string">&quot;前灯关&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      turnOnServo.write(<span class="number">63</span>);</span><br><span class="line">      delay(<span class="number">500</span>);</span><br><span class="line">      turnOnServo.write(<span class="number">81</span>);</span><br><span class="line">      Serial.println(<span class="string">&quot;前灯开&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;s&#x27;</span> || ch == <span class="string">&#x27;S&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">0</span>)&#123;</span><br><span class="line">      turnOffServo.write(<span class="number">63</span>);</span><br><span class="line">      delay(<span class="number">500</span>);</span><br><span class="line">      turnOffServo.write(<span class="number">81</span>);</span><br><span class="line">      Serial.println(<span class="string">&quot;后灯关&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      turnOnServo.write(<span class="number">95</span>);</span><br><span class="line">      delay(<span class="number">500</span>);</span><br><span class="line">      turnOnServo.write(<span class="number">81</span>);</span><br><span class="line">      Serial.println(<span class="string">&quot;后灯开&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreLightCallback</span><span class="params">(<span class="type">const</span> String &amp; state)</span>&#123;</span><br><span class="line">  BLINKER_LOG(<span class="string">&quot;get button state: &quot;</span>, state);</span><br><span class="line">  <span class="keyword">if</span> (state == BLINKER_CMD_ON)&#123;</span><br><span class="line">    spin(<span class="string">&#x27;p&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    PreLight.print(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">    BlinkerMIOT.powerState(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">    BlinkerMIOT.print();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == BLINKER_CMD_OFF)&#123;</span><br><span class="line">    spin(<span class="string">&#x27;p&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    PreLight.print(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">    BlinkerMIOT.powerState(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">    BlinkerMIOT.print();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SufLightCallback</span><span class="params">(<span class="type">const</span> String &amp; state)</span>&#123;</span><br><span class="line">  BLINKER_LOG(<span class="string">&quot;get button state: &quot;</span>, state);</span><br><span class="line">  <span class="keyword">if</span> (state == BLINKER_CMD_ON)&#123;</span><br><span class="line">    spin(<span class="string">&#x27;s&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    SufLight.print(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">    BlinkerMIOT.powerState(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">    BlinkerMIOT.print();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == BLINKER_CMD_OFF)&#123;</span><br><span class="line">    spin(<span class="string">&#x27;s&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    SufLight.print(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">    BlinkerMIOT.powerState(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">    BlinkerMIOT.print();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">miotMode</span><span class="params">(<span class="type">uint8_t</span> mode)</span>&#123;</span><br><span class="line">  BLINKER_LOG(<span class="string">&quot;need set mode: &quot;</span>, mode);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (mode == BLINKER_CMD_MIOT_DAY)&#123;</span><br><span class="line">    UDPSendPacket(ip, port);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode == BLINKER_CMD_MIOT_NIGHT)&#123;</span><br><span class="line">    spin(<span class="string">&#x27;p&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    PreLight.print(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode == BLINKER_CMD_MIOT_COLOR)&#123;</span><br><span class="line">    spin(<span class="string">&#x27;p&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    PreLight.print(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode == BLINKER_CMD_MIOT_WARMTH)&#123;</span><br><span class="line">    spin(<span class="string">&#x27;s&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    SufLight.print(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode == BLINKER_CMD_MIOT_TV)&#123;</span><br><span class="line">    spin(<span class="string">&#x27;s&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    SufLight.print(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode == BLINKER_CMD_MIOT_READING)&#123;</span><br><span class="line">    spin(<span class="string">&#x27;p&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    spin(<span class="string">&#x27;s&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    PreLight.print(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">    SufLight.print(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode == BLINKER_CMD_MIOT_COMPUTER)&#123;</span><br><span class="line">    spin(<span class="string">&#x27;p&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    spin(<span class="string">&#x27;s&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    PreLight.print(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">    SufLight.print(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  BlinkerMIOT.mode(mode);</span><br><span class="line">  BlinkerMIOT.print();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  BLINKER_DEBUG.stream(Serial);</span><br><span class="line"></span><br><span class="line">  Blinker.begin(auth, ssid, pswd);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// assign port</span></span><br><span class="line">  UDP.begin(port);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Servo attach</span></span><br><span class="line">  turnOnServo.attach(turnOnServoPin, Servo::CHANNEL_NOT_ATTACHED, <span class="number">45</span>, <span class="number">120</span>);</span><br><span class="line">  turnOffServo.attach(turnOffServoPin, Servo::CHANNEL_NOT_ATTACHED, <span class="number">45</span>, <span class="number">120</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// CallBack</span></span><br><span class="line">  Button.attach(ButtonCallback);</span><br><span class="line">  PreLight.attach(PreLightCallback);</span><br><span class="line">  SufLight.attach(SufLightCallback);</span><br><span class="line">  BlinkerMIOT.attachMode(miotMode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  Blinker.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">借助 ESP32 平台，接入小爱同学语音控制，完成宿舍灯光的控制。此次与 WoL 唤醒采用了同一个板子，需要特别注意 Blinker 多设备控制的方法。</summary>
    
    
    
    
    <category term="IoT" scheme="http://remoder.github.io/tags/IoT/"/>
    
    <category term="ESP32" scheme="http://remoder.github.io/tags/ESP32/"/>
    
    <category term="Arduino" scheme="http://remoder.github.io/tags/Arduino/"/>
    
    <category term="blinker" scheme="http://remoder.github.io/tags/blinker/"/>
    
  </entry>
  
  <entry>
    <title>IoT Learning: Turn On PC by WoL</title>
    <link href="http://remoder.github.io/Turn-on-PC-by-WoL.html"/>
    <id>http://remoder.github.io/Turn-on-PC-by-WoL.html</id>
    <published>2023-03-10T10:17:58.000Z</published>
    <updated>2023-06-26T16:58:22.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Part-1-思路介绍"><a href="#Part-1-思路介绍" class="headerlink" title="Part 1: 思路介绍"></a>Part 1: 思路介绍</h1><p>WoL (Wake On Lan)，即从局域网唤醒电脑，亦或配合路由器远程唤醒。具体过程在于，透过局域网设备对电脑网卡发送命令，使其从休眠或关机状态唤醒转换成开机状态。  </p><p>通过 ESP32 设备向电脑端口发送命令通信，激活 WoL 便可实现开机。同时，为便利生活，考虑借助 <a href="https://diandeng.tech/">点灯科技</a> 将 ESP32 设备接入小爱同学以进行语音控制。</p><h1 id="Part-2-准备工作"><a href="#Part-2-准备工作" class="headerlink" title="Part 2: 准备工作"></a>Part 2: 准备工作</h1><ol><li><a href>搭建 Aruidno + ESP32 开发环境</a></li><li><a href="https://post.smzdm.com/p/a7d70m4g/">开启电脑的 WoL 功能</a></li><li><a href="https://diandeng.tech/doc/getting-start-esp32-wifi">安装 blinker 库</a></li></ol><h1 id="Part-3-编写代码"><a href="#Part-3-编写代码" class="headerlink" title="Part 3: 编写代码"></a>Part 3: 编写代码</h1><h2 id="通过-UDP-进行通信实现-WoL-功能"><a href="#通过-UDP-进行通信实现-WoL-功能" class="headerlink" title="通过 UDP 进行通信实现 WoL 功能"></a>通过 UDP 进行通信实现 WoL 功能</h2><p>假设被唤醒的 PC 网卡 MAC 地址为：<code>01 02 03 04 05 06</code>，则 WoL 魔法包的结构即为：<code>FF FF FF FF FF FF | 01 02 03 04 05 06 ...(Repeat for 16 times totally)... 01 02 03 04 05 06</code>。  </p><p>其中头部 <code>FF FF FF FF FF FF</code> 固定不变，后部为 MAC 地址的十六次重复。有时数据包还会紧接着4-6字节的密码信息，本文中设为空。</p><p>将此数据包由任意空闲端口发送至目标计算机即可唤醒。</p><p>代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Author: ReModer</span></span><br><span class="line"><span class="comment">  Date: 10/03/2023</span></span><br><span class="line"><span class="comment">  Func: To realize WoL By Blinker. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFiUdp.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ssid = <span class="string">&quot;***&quot;</span>; <span class="comment">// here is your Wifi id</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *pswd = <span class="string">&quot;***&quot;</span>; <span class="comment">// here is your Wifi password</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Data about WoL</span></span><br><span class="line"><span class="type">int</span> port = **; <span class="comment">// every port from 1 to 25565 can be used</span></span><br><span class="line">byte preamble[] = &#123;<span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>&#125;; </span><br><span class="line">byte macAddress[] = &#123;<span class="number">0</span>x**, <span class="number">0</span>x**, <span class="number">0</span>x**, <span class="number">0</span>x**, <span class="number">0</span>x**, <span class="number">0</span>x**&#125;; <span class="comment">// **-**-**-** is your MAC Address</span></span><br><span class="line">IPAddress <span class="title function_">ip</span><span class="params">(**, **, **, **)</span>; <span class="comment">// IPAddress is a class with the only constructed function to describe an IP address</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// UDP</span></span><br><span class="line">WiFiUDP UDP;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UDPSendPacket</span><span class="params">(IPAddress ip, <span class="type">int</span> port)</span>&#123;</span><br><span class="line">  UDP.beginPacket(ip, port);</span><br><span class="line">  UDP.write(preamble, <span class="keyword">sizeof</span>(preamble));</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    UDP.write(macAddress, <span class="keyword">sizeof</span>(macAddress));</span><br><span class="line">  UDP.endPacket();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// init WIFI driver</span></span><br><span class="line">  WiFi.mode(WIFI_STA);</span><br><span class="line">  WiFi.begin(ssid, pswd);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// assign port</span></span><br><span class="line">  UDP.begin(port);</span><br><span class="line"></span><br><span class="line">  Serial.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  Serial.println(<span class="string">&quot;... Start Successfully ...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  UDPSendPacket(ip, port);</span><br><span class="line">  Serial.println(<span class="string">&quot;Send succesfully once again.&quot;</span>);</span><br><span class="line">  delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然，我们不需要一次次重启电脑来验证程序，可以利用 <a href="https://www.depicus.com/wake-on-lan/wake-on-lan-monitor">Wake on Lan Monitor</a> 验证数据包是否传输成功，保证端口号一致即可。</p><h2 id="连接-blinker-实现手机端-APP-操控"><a href="#连接-blinker-实现手机端-APP-操控" class="headerlink" title="连接 blinker 实现手机端 APP 操控"></a>连接 blinker 实现手机端 APP 操控</h2><p>添加 blinker 相关部分即可，基本没难度，可以去参考 <a href="https://diandeng.tech/doc">官方文档</a>。</p><p>如果不追求语音控制的话，到这一步其实已经可以结束了。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Author: ReModer</span></span><br><span class="line"><span class="comment">  Date: 10/03/2023</span></span><br><span class="line"><span class="comment">  Func: To realize WoL By Blinker. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLINKER_WIFI</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFiUdp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Blinker.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *auth = <span class="string">&quot;***&quot;</span>; <span class="comment">// here is your blinker device secret key</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ssid = <span class="string">&quot;***&quot;</span>; <span class="comment">// here is your Wifi id</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *pswd = <span class="string">&quot;***&quot;</span>; <span class="comment">// here is your Wifi password</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Data about WoL</span></span><br><span class="line"><span class="type">int</span> port = **; <span class="comment">// every port from 1 to 25565 can be used</span></span><br><span class="line">byte preamble[] = &#123;<span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>&#125;; </span><br><span class="line">byte macAddress[] = &#123;<span class="number">0</span>x**, <span class="number">0</span>x**, <span class="number">0</span>x**, <span class="number">0</span>x**, <span class="number">0</span>x**, <span class="number">0</span>x**&#125;; <span class="comment">// **-**-**-** is your MAC Address</span></span><br><span class="line">IPAddress <span class="title function_">ip</span><span class="params">(**, **, **, **)</span>; <span class="comment">// IPAddress is a class with the only constructed function to describe an IP address</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// UDP</span></span><br><span class="line">WiFiUDP UDP;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Blinker Device</span></span><br><span class="line">BlinkerButton <span class="title function_">Button</span><span class="params">(<span class="string">&quot;TurnOnPC&quot;</span>)</span>; <span class="comment">// The name should be samed as the name on APP</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UDPSendPacket</span><span class="params">(IPAddress ip, <span class="type">int</span> port)</span>&#123;</span><br><span class="line">  UDP.beginPacket(ip, port);</span><br><span class="line">  UDP.write(preamble, <span class="keyword">sizeof</span>(preamble));</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    UDP.write(macAddress, <span class="keyword">sizeof</span>(macAddress));</span><br><span class="line">  UDP.endPacket();</span><br><span class="line"></span><br><span class="line">  Serial.println(<span class="string">&quot;Send succesfully once again.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ButtonCallback</span><span class="params">(<span class="type">const</span> String &amp; state)</span>&#123;</span><br><span class="line">  BLINKER_LOG(<span class="string">&quot;get button state: &quot;</span>, state);</span><br><span class="line">  UDPSendPacket(ip, port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  BLINKER_DEBUG.stream(Serial);</span><br><span class="line"></span><br><span class="line">  Blinker.begin(auth, ssid, pswd);</span><br><span class="line">  Button.attach(ButtonCallback);</span><br><span class="line"></span><br><span class="line">  UDP.begin(port);</span><br><span class="line"></span><br><span class="line">  Serial.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  Serial.println(<span class="string">&quot;... Start Successfully ...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  Blinker.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="接入小爱同学实现语音控制"><a href="#接入小爱同学实现语音控制" class="headerlink" title="接入小爱同学实现语音控制"></a>接入小爱同学实现语音控制</h2><p>按照 <a href="https://diandeng.tech/doc/xiaoai">Blinker 设备接入小爱同学</a> 所讲，加入插座类部分即可，注意回调函数与及时反馈。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Author: ReModer</span></span><br><span class="line"><span class="comment">  Date: 10/03/2023</span></span><br><span class="line"><span class="comment">  Func: To realize WoL By Blinker. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLINKER_WIFI</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLINKER_MIOT_OUTLET</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFiUdp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Blinker.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *auth = <span class="string">&quot;3d1d35761f0a&quot;</span>; <span class="comment">// here is your blinker device secret key</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ssid = <span class="string">&quot;是你蹭不到的&quot;</span>; <span class="comment">// here is your Wifi id</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *pswd = <span class="string">&quot;sncbdd330&quot;</span>; <span class="comment">// here is your Wifi password</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Data about WoL</span></span><br><span class="line"><span class="type">int</span> port = <span class="number">6022</span>; <span class="comment">// every port from 1 to 25565 can be used</span></span><br><span class="line">byte preamble[] = &#123;<span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>&#125;; </span><br><span class="line">byte macAddress[] = &#123;<span class="number">0xB0</span>, <span class="number">0x25</span>, <span class="number">0xAA</span>, <span class="number">0x42</span>, <span class="number">0x8F</span>, <span class="number">0xCE</span>&#125;; <span class="comment">// **-**-**-** is your MAC Address</span></span><br><span class="line">IPAddress <span class="title function_">ip</span><span class="params">(<span class="number">192</span>, <span class="number">168</span>, <span class="number">1</span>, <span class="number">107</span>)</span>; <span class="comment">// IPAddress is a class with the only constructed function to describe an IP address</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// UDP</span></span><br><span class="line">WiFiUDP UDP;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Blinker Device</span></span><br><span class="line">BlinkerButton <span class="title function_">Button</span><span class="params">(<span class="string">&quot;TurnOnPC&quot;</span>)</span>; <span class="comment">// The name should be samed as the name on APP</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UDPSendPacket</span><span class="params">(IPAddress ip, <span class="type">int</span> port)</span>&#123;</span><br><span class="line">  UDP.beginPacket(ip, port);</span><br><span class="line">  UDP.write(preamble, <span class="keyword">sizeof</span>(preamble));</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    UDP.write(macAddress, <span class="keyword">sizeof</span>(macAddress));</span><br><span class="line">  UDP.endPacket();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ButtonCallback</span><span class="params">(<span class="type">const</span> String &amp; state)</span>&#123;</span><br><span class="line">  BLINKER_LOG(<span class="string">&quot;get button state: &quot;</span>, state);</span><br><span class="line">  UDPSendPacket(ip, port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">miotPowerState</span><span class="params">(<span class="type">const</span> String &amp; state)</span>&#123;</span><br><span class="line">  BLINKER_LOG(<span class="string">&quot;need set power state: &quot;</span>, state);</span><br><span class="line">  <span class="keyword">if</span> (state == BLINKER_CMD_ON)&#123;</span><br><span class="line">    UDPSendPacket(ip, port);</span><br><span class="line">    BlinkerMIOT.powerState(<span class="string">&quot;on&quot;</span>);</span><br><span class="line">    BlinkerMIOT.print();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == BLINKER_CMD_OFF)&#123;</span><br><span class="line">    BlinkerMIOT.powerState(<span class="string">&quot;off&quot;</span>);</span><br><span class="line">    BlinkerMIOT.print();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  BLINKER_DEBUG.stream(Serial);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Blinker.begin(auth, ssid, pswd);</span><br><span class="line">  Button.attach(ButtonCallback);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// assign port</span></span><br><span class="line">  UDP.begin(port);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// CallBack</span></span><br><span class="line">  BlinkerMIOT.attachPowerState(miotPowerState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  Blinker.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Part-4-参考资料"><a href="#Part-4-参考资料" class="headerlink" title="Part 4: 参考资料"></a>Part 4: 参考资料</h1><p><a href="https://www.jianshu.com/p/22cbb5e9036a">玩转WakeOnLan(远程开机)</a>  </p><p><a href="https://blog.csdn.net/weixin_33739523/article/details/92981370">Python WOL/WakeOnLan/网络唤醒数据包发送工具</a></p><p><a href="https://cloud.tencent.com/developer/article/1352026#">网络唤醒(WOL)全解指南：原理篇</a></p><p><a href="https://blog.csdn.net/Naisu_kun/article/details/86300456">使用Arduino开发ESP32（04）：UDP通讯使用说明</a></p><p><a href="https://zhuanlan.zhihu.com/p/87212242">小爱同学+ESP8266-01S控制家里的灯（Blinker接入）</a></p><p><a href="https://zhuanlan.zhihu.com/p/93143539">小爱同学+ESP8266+手机APP远程开启电脑</a></p><p><a href="https://github.com/tty228/udp_turn_off">小爱同学使用 esp32 网络唤醒电脑、关闭电脑</a></p>]]></content>
    
    
    <summary type="html">借助 ESP32 平台，接入小爱同学语音控制，以通过 WoL 对电脑进行远程唤醒。</summary>
    
    
    
    
    <category term="IoT" scheme="http://remoder.github.io/tags/IoT/"/>
    
    <category term="ESP32" scheme="http://remoder.github.io/tags/ESP32/"/>
    
    <category term="Arduino" scheme="http://remoder.github.io/tags/Arduino/"/>
    
    <category term="blinker" scheme="http://remoder.github.io/tags/blinker/"/>
    
    <category term="Wake on Lan" scheme="http://remoder.github.io/tags/Wake-on-Lan/"/>
    
  </entry>
  
  <entry>
    <title>Python_Spider_Tutorials</title>
    <link href="http://remoder.github.io/python-spider-tutorials.html"/>
    <id>http://remoder.github.io/python-spider-tutorials.html</id>
    <published>2022-10-08T14:55:27.000Z</published>
    <updated>2023-06-26T16:58:22.372Z</updated>
    
    <content type="html"><![CDATA[<p>声明：学习资料来源于<a href="https://github.com/wistbean/learn_python3_spider">wistbean’s github</a></p><h1 id="Part-1-理论基础"><a href="#Part-1-理论基础" class="headerlink" title="Part 1: 理论基础"></a>Part 1: 理论基础</h1><h2 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h2><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h3><p><code>www.xxxxx.com/s?xx=yyyyy&amp;xx=yyyyy</code>，<code>?</code>后即为<strong>键值对</strong>形式的请求参数。  </p><h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h3><p>以<code>Form</code>表单方式提交参数的请求，参数一般在<code>request body</code>里面。  </p><ul><li>请求头 Request Header<br>包含一些 <code>HTTP请求</code> 的头部信息，如<code>Accept</code>, <code>Host</code>, <code>cookie</code>, <code>User-Agent</code>。  </li><li>响应头 Response Header</li><li>响应体 Response Body<br>服务器返回的数据。  </li></ul><h1 id="Part-2-通过-Fiddler-进行手机抓包"><a href="#Part-2-通过-Fiddler-进行手机抓包" class="headerlink" title="Part 2: 通过 Fiddler 进行手机抓包"></a>Part 2: 通过 Fiddler 进行手机抓包</h1><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><ol><li>配置浏览器代理<br>浏览器 - 设置 - 高级 - 打开代理设置 - IP<code>127.0.0.1</code> 端口<code>8888</code>  </li><li>安装 HTTPs 证书<br>Fiddler - Tools - Options - HTTPS - 勾选 <code>Decrypt HTTPS traffic</code> - Actions - <code>Reset All Certificates</code></li><li>下载证书<br>浏览器输入<code>localhost:8888</code>，点击<code>FiddlerRoot certificate</code>下载证书。</li><li>设置 Fiddler<br>设置<code>Fiddler Classiclistens onport: 8888</code>；<br>勾选<code>Act as system proxy on startup</code>, <code>Monitor all connections</code>, <code>Allow remote computers to connect</code>, <code>Reuse client connections</code>, <code>Reuse server connections</code> ,<code>DefaultLan及本框所有</code>。</li><li><strong>重启电脑</strong></li><li>手机连接统一 WIFI，浏览器进入<code>[IPv4地址]:8888</code>，点击<code>FiddlerRoot certificate</code>下载证书。</li><li><strong>仅针对iPhone，Android跳过此步。</strong>设置 - 通用 - 关于本机 - 证书信任设置 - 勾上刚下载的证书。  </li></ol><p><font color="red">此节暂时终止，原因为手机添加代理后无法上网，且未解决<code>Tunnel To 443</code>问题。</font></p><h1 id="Part-3-第三方库"><a href="#Part-3-第三方库" class="headerlink" title="Part 3: 第三方库"></a>Part 3: 第三方库</h1><h2 id="Urllib-库的使用"><a href="#Urllib-库的使用" class="headerlink" title="Urllib 库的使用"></a>Urllib 库的使用</h2><ul><li><p>requset 模块</p><blockquote><p>主要作用：发起请求  </p></blockquote><ul><li><code>urllib.request.urlopen(url, data=None, [timeout,]*)</code><br>默认是 <code>Get</code> 请求，传入参数 <code>data</code> 后成为 <code>POST</code> 请求。 </li><li><code>urllib.request.Request(url, data=None, headers=&#123;&#125;, method=None)</code><br>此函数可以传入<code>请求头信息</code>了。</li></ul></li><li><p>error 模块</p><blockquote><p>主要作用：异常处理</p></blockquote></li><li><p>parse 模块</p><blockquote><p>解析 URL 地址</p></blockquote></li><li><p>robotparser</p><blockquote><p>解析 robot.txt</p></blockquote></li></ul><h2 id="Request-库的使用"><a href="#Request-库的使用" class="headerlink" title="Request 库的使用"></a>Request 库的使用</h2><p>比 <code>Urllib</code> 简单得多，推荐首选。</p><p>使用自行查找(官方文档)[<a href="https://requests.readthedocs.io/en/latest/]%E3%80%82">https://requests.readthedocs.io/en/latest/]。</a></p><h1 id="Part-4-正则表达式"><a href="#Part-4-正则表达式" class="headerlink" title="Part 4: 正则表达式"></a>Part 4: 正则表达式</h1><p>(Github 教程)[<a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md#learn-regex]">https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md#learn-regex]</a><br>(re 库)[<a href="https://docs.python.org/3/library/re.html]">https://docs.python.org/3/library/re.html]</a></p>]]></content>
    
    
    <summary type="html">爬虫学习过程的笔记。</summary>
    
    
    
    
    <category term="Python" scheme="http://remoder.github.io/tags/Python/"/>
    
    <category term="Spider" scheme="http://remoder.github.io/tags/Spider/"/>
    
  </entry>
  
  <entry>
    <title>辩论进阶途径剖析</title>
    <link href="http://remoder.github.io/debate-skill-ways.html"/>
    <id>http://remoder.github.io/debate-skill-ways.html</id>
    <published>2021-12-21T15:30:09.000Z</published>
    <updated>2023-06-26T16:58:22.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="最好方法"><a href="#最好方法" class="headerlink" title="最好方法"></a>最好方法</h2><p>找个靠谱的人带着！！！</p><h2 id="一些网课"><a href="#一些网课" class="headerlink" title="一些网课"></a>一些网课</h2><p><a href="https://link.zhihu.com/?target=http://open.163.com/movie/2015/8/Q/S/MAUUPD810_MAV6D2AQS.html">周帅《辩论-说服的艺术》</a></p><h2 id="一些文章"><a href="#一些文章" class="headerlink" title="一些文章"></a>一些文章</h2><p><a href="https://www.zhihu.com/question/35258771/answer/61934470">辩论赛的判准发展</a><br><a href="https://www.zhihu.com/question/31637556/answer/52770107">辩论技术流的发展</a><br><a href="https://zhuanlan.zhihu.com/p/45159176">请教学长姐的姿势</a></p><h2 id="一些工具"><a href="#一些工具" class="headerlink" title="一些工具"></a>一些工具</h2><p><a href="http://www.guoxuedashi.net/">国学大师-查询字词成语</a></p><h2 id="一些课本"><a href="#一些课本" class="headerlink" title="一些课本"></a>一些课本</h2><p><a href="/download/%E8%B6%85%E7%BA%A7%E8%BE%A9%E6%89%8B%C2%B7%E8%BE%A9%E8%AE%BA%E9%80%9A%E8%AF%86%E8%AF%BE%E6%9C%AC.pdf">超辩通识课本</a><br><a href="/download/%E9%BB%84%E6%89%A7%E4%B8%AD%E5%8D%9A%E5%AE%A2.pdf">黄执中博客pdf版</a><br><a href="/download/%E8%BE%A9%E8%AE%BA%E6%8F%90%E9%AB%98%E5%B0%8F%E5%86%8C%E5%AD%90-%E9%83%AD%E5%88%9D%E8%88%AA.pdf">郭初航辩论小册子</a></p><h1 id="提高"><a href="#提高" class="headerlink" title="提高"></a>提高</h1><h2 id="看比赛"><a href="#看比赛" class="headerlink" title="看比赛"></a>看比赛</h2><h3 id="看什么比赛"><a href="#看什么比赛" class="headerlink" title="看什么比赛"></a>看什么比赛</h3><h4 id="赛事"><a href="#赛事" class="headerlink" title="赛事"></a>赛事</h4><ul><li>国际华语辩论邀请赛</li><li>世界华语辩论锦标赛</li><li>华语辩论世界杯。</li></ul><h4 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h4><p><a href="https://www.zhihu.com/question/38107906">2015年度，最值得推荐的辩论赛视频有哪些？</a><br><a href="https://www.zhihu.com/question/23297032">有哪些经典的辩论赛视频可以推荐？</a></p><h3 id="怎么看比赛"><a href="#怎么看比赛" class="headerlink" title="怎么看比赛"></a>怎么看比赛</h3><ol><li>开始之前，写一些双方的基本思路。</li><li>多次听立论：<ol><li>分别记录双方的论点论据</li><li>其他辩位补充申论时完善</li></ol></li><li>记录交锋点：<ol><li>定义的交锋<ul><li>定义不同时双方说了什么</li><li>结辩时定义还不同的话如何处理</li></ul></li><li>判准的争夺<ul><li>如何去说服评委接受自己的判准</li></ul></li><li>论点的拆解 &amp; 论据的检证<ul><li>首质对对手的理论体系做了怎样的框定和拆解</li><li>论据提出后，双方做了什么相抗论据和补充解释</li><li>拆解论点和论证立场缺乏逻辑关系时说了什么</li></ul></li></ol></li><li>自由辩结束后，选择一个立场做结辩。<ol><li>重点在于总结战场，要梳理出对方漏洞和己方未结论点。</li><li>初始阶段时间可以稍微放宽，然后逐渐加到规定时间。 </li></ol></li><li>双方结辩后：<ol><li>回顾双方的理论体系</li><li>判断哪方论证残留度更高</li><li>观察视频中四辩的结辩框架</li><li>思考双方在理论时为何以这样的方式阐述论点</li></ol></li><li>评委点评时：<ol><li>对于双方论点的认知，与评委是否存在差异</li><li>对于双方交锋的胜负，与评委是否存在差异</li><li>注意评委的拆解与论证示范</li><li>于评委期待和视频中四辩比较自己的结辩</li></ol></li></ol><h2 id="打比赛"><a href="#打比赛" class="headerlink" title="打比赛"></a>打比赛</h2><h3 id="怎么备比赛"><a href="#怎么备比赛" class="headerlink" title="怎么备比赛"></a>怎么备比赛</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>定义的目的是<strong>确定战场</strong>，不是回避战场。有些空间是特意留给对方的，与其想怎么封死定义，不如想怎么面对争议。</li><li>辩题有争议是因为，在一般人的理解中，这个题目两边难以取舍，都合理。<br>打破的方法是<strong>新资讯</strong>或<strong>新观念</strong>。<ul><li>新资讯是说出一般人所不知道或没考虑到的得失，为天秤的一端加砝码。</li><li>新观念是重新诠释一般人的理解，从中挖出一层新意义。在砝码不变的情况下改变支点。</li></ul></li><li>定义对己方有利，不是说在此定义下我会赢，而是在此定义下辩题会有新意义，只是我方立场<strong>碰巧</strong>符合了这层新意义。</li></ul><h4 id="立论"><a href="#立论" class="headerlink" title="立论"></a>立论</h4><ol><li>查阅资料，收集双方的论点论据，做到在不看稿子的情况下能说清楚双方的主要观点。</li><li>对于己方论点要保证说20～30遍，用各种不同的方式。<ul><li>申论，反驳，提问，戏谑，归纳，类比，长篇大论</li><li>顺说，反说，从某个关键句引申</li><li>说给队友，说给自己，说给没有听过比赛的人</li></ul></li><li>想一想：<ul><li>我的立论到底是什么？</li><li>场上我传递给评委的立论是什么？</li><li>在我被对手干扰后，我传递到评委耳朵里的立论又还剩下了什么？</li></ul></li></ol><h3 id="怎么打比赛"><a href="#怎么打比赛" class="headerlink" title="怎么打比赛"></a>怎么打比赛</h3><ol><li>场上的记录<ul><li>学会用符号和关键词</li><li>梳理相关论点的前后逻辑</li><li>关注对面的“怪话”</li></ul></li><li>自由辩环节<ul><li>控场打法技巧<ul><li>起：说清楚问题逻辑，提出问题</li><li>追：追两三个同样逻辑的问题</li><li>结：把问题结论结一下，明确己方的战场成果</li><li>转：转到下一个问题，另一片战场</li></ul></li><li>用自己最强的辩手，盯防对方的王牌辩手，紧跟发言，抑制输出</li><li>揪住对方难以解释的点多次打击、连续追问简短问题，打乱对方节奏</li></ul></li><li>交锋的处理<ul><li>勿多条逻辑逼近</li><li>明确攻点和守点<ul><li>攻点：逻辑短，易论证，要优先打</li><li>守点：逻辑长，难论证，不主动打</li></ul></li><li>分清战场的优劣<ul><li>优势战场要获胜，追问攻击加短打</li><li>烈士战场求持平，解释防守并反问</li></ul></li></ul></li><li>辩位的申论<ol><li>一辩重在明确定义、提出标准、展开论点</li><li>二辩重在反驳对手论点，进一步补充论据</li><li>三遍明确前期交锋，提出自由辩的主战场</li><li>四辩重在梳理比赛，明确不同战场的胜负</li></ol></li><li>结辩的框架<ol><li>破框架<ul><li>按定义，标准，论点，价值的排序，做一个全面反驳</li><li>“第一，对方辩友的定义有偏差…<br>第二，对方辩友的比较标准不合理…<br>第三，对方辩友的论点不成立…<br>第四，对方辩友的价值不值得提倡…”</li><li><a href="www.bilibili.com/video/BV1zb41127aR">金钱是不是万恶之源(反四胡渐彪)</a> </li></ul></li><li>破分歧<ul><li>找到双方正常比赛最为核心的两到三个分歧，进行拆解和阐述</li><li>“今天这场比赛，我们双方达成了这几点共识…我们剩下最核心的分歧无非是…”</li><li><a href="https://www.bilibili.com/video/BV17s411K74B">21世纪青年人做加法/做减法更幸福(正四詹青云)</a></li></ul></li><li>破价值<ul><li>把对方所有的论点概括成一种价值倡导，然后进行反驳</li><li>“对方辩友今天说了很多…可是说到底他们都是在说一件事…他们所提倡的价值无非是…可是大家有没有想过…”</li><li><a href="https://www.bilibili.com/video/BV1Mx411A7nv">顺境和逆境何者更有助于人的成长(反四黄执中)</a></li></ul></li></ol></li><li>表达的要求<ul><li>好的表达不是一口气一大段话，而是像喂小孩子吃饭，一次一口，每次一小口，吃一下停一下，等他咀嚼。</li><li>我在念书时，怎么会知道我能否承受病人离开人世的压力？(×)<br> 我想当医生，但当我念完书后，发现自己怕见血，怎么办？(√)</li></ul></li><li>比赛的层次<ul><li>比赛的层次，一般是指双方间整体举证责任的推移，与辩士间指责切换的过程。</li><li>表达的层次，或者说叙事的顺序，才是个人所能努力的。<ul><li>辩手基本功：“对方刚说”法(单点钉单点)<ol><li>先引用对反的论点（对方刚才说xxxxx）</li><li>配一段己方反驳（但我方认为xxxxx）</li><li>接着换下一个论点（对方刚才又提出xxxxx）</li><li>然后再反驳（但我方却想问xxxxx）</li></ol></li><li>架构的核心是一套逻辑性的检证程序时：“退一步说”法(从点走到面)  <ol><li>提出一个标准（对方必须先证明xxxxx）</li><li>再做检证（但未必xxxxx）</li><li>退一层标准（退一步说，就算真的xxxxx）</li><li>再做检证（但也未必便xxxxx）</li><li>再退一层（再退一步说，就算真的xxxxx）</li><li>再做检证（但也未必就xxxxx）</li></ol></li><li>架构的关键在某个观念或定义的接受与否：“这个角度”法(头过身就过)  <ol><li>标出要突破的观念点（有个观点很有趣，就是xxxxx）</li><li>逐一请扫战场，提出诠释（让我们从这个角度看看今天场上的争论）</li><li>让每次诠释印证并加深大家对观念点的理解（对方之所以会那样说，只是因为他们不理解xxxxx） </li></ol></li><li>辩题讨论范围广，战场太分散，超出架构：“大意是说”法(抓大放小) <ol><li>先把性质相近的琐碎战场整理起来（对方刚才说xxxxx，大意就是在强调xxxxx）</li><li>各战场只归纳，不交锋（对方又说xxxxx，其实也是在说xxxxx）</li><li>最后合并出来，一次解决（所以今天的比赛说的只有一个事，那就是xxxxx） </li></ol></li></ul></li></ul></li></ol><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="构建辩论环境"><a href="#构建辩论环境" class="headerlink" title="构建辩论环境"></a>构建辩论环境</h2><ul><li><strong>微信公众号：</strong> online辩论</li></ul><h2 id="拓宽辩论思维"><a href="#拓宽辩论思维" class="headerlink" title="拓宽辩论思维"></a>拓宽辩论思维</h2><h3 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h3><ul><li><p>辩论相关</p><ul><li>《形式逻辑》金岳霖</li><li>《金字塔原理》芭芭拉·明托</li><li>《罗伯特议事规则》亨利·罗伯特</li><li>《认识辩论》游梓翔</li><li>《论辩史话》赵传栋</li><li>《简单逻辑学》丹尼斯·麦克伦尼 赵明燕译</li><li>《好好讲道理：反击谬误的逻辑学训练》爱德华·戴默 刀尔登译</li></ul></li><li><p>文史哲相关</p><ul><li>《西方哲学史》伯特兰·罗素</li><li>《中国哲学简史》冯友兰</li><li>《全球通史》</li><li>《二十四史》</li><li>《国史新论》</li><li>四大名著</li><li>金庸武侠</li></ul></li></ul>]]></content>
    
    
    <summary type="html">新生班选拔赛被暴打，决定进阶辩论能力，此文主要记录收集到的方法论。</summary>
    
    
    
    
    <category term="辩论" scheme="http://remoder.github.io/tags/%E8%BE%A9%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>博客诞生记</title>
    <link href="http://remoder.github.io/theBirthOfBlog.html"/>
    <id>http://remoder.github.io/theBirthOfBlog.html</id>
    <published>2021-06-24T15:07:53.000Z</published>
    <updated>2023-06-26T16:58:22.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="无中生有"><a href="#无中生有" class="headerlink" title="无中生有"></a>无中生有</h1><p>按着 <a href="https://adkcss.coding-pages.com/posts/6e8839eb.html#toc-heading-21">傻瓜式教程</a> 搭完了基础博客。</p><p>无脑按教程走，除了一点：Github 更新后 master 被改名为了 main，设置时要<strong>与时俱进</strong>。</p><p>另外，调整 <code>permalink</code> 的时候末尾要加上 <code>.html</code>，不然点击文章无法进入，而是下载。</p><h1 id="开始美化"><a href="#开始美化" class="headerlink" title="开始美化"></a>开始美化</h1><h3 id="挑选主题"><a href="#挑选主题" class="headerlink" title="挑选主题"></a>挑选主题</h3><p>经过长时间的对比，最终选择了 <a href="https://butterfly.js.org/">ButterFly</a>。</p><h3 id="完善主题"><a href="#完善主题" class="headerlink" title="完善主题"></a>完善主题</h3><ul><li>建立标签页</li><li>建立分类页</li><li>建立友链页<br>友链页代码段在教程中没有分段(似乎是我自己浏览器的问题)，现给出格式化后的代码：  </li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情鏈接</span></span><br><span class="line"><span class="attr">class_desc:</span> <span class="string">那些人，那些事</span></span><br><span class="line"><span class="attr">link_list:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">    <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">    <span class="attr">descr:</span> <span class="string">快速、簡單且強大的網誌框架</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">網站</span></span><br><span class="line"><span class="attr">class_desc:</span> <span class="string">值得推薦的網站</span></span><br><span class="line"><span class="attr">link_list:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Youtube</span></span><br><span class="line">    <span class="attr">link:</span> <span class="string">https://www.youtube.com/</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line">    <span class="attr">descr:</span> <span class="string">視頻網站</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Weibo</span></span><br><span class="line">    <span class="attr">link:</span> <span class="string">https://www.weibo.com/</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line">    <span class="attr">descr:</span> <span class="string">中國最大社交分享平台</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Twitter</span></span><br><span class="line">    <span class="attr">link:</span> <span class="string">https://twitter.com/</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line">    <span class="attr">descr:</span> <span class="string">社交分享平台</span></span><br></pre></td></tr></table></figure><ul><li><p>创建导航菜单</p><p><strong>主题配置文件</strong> 是指 <code>\themes\butterfly\_config.yml</code></p></li><li><p>修改代码风格</p><p>最终选择了 <code>mac</code></p></li><li><p>修改文章自动节选</p><p>最终选择了 <code>both</code></p></li><li><p>背景图片</p><p>主页选择了 <a href="https://api.dujin.org/bing/1920.php">必应每日一图</a><br>其他页面选择了 <a href="https://api.ixiaowai.cn/gqapi/gqapi.php">随机壁纸</a></p></li><li><p>更换头像</p><blockquote><p>不要把个人需要的文件/图片放在主题 source 文件夹里，因为在升级主题的过程中，可能会把文件覆盖删除了。在 Hexo 根目录的 source 文件夹里，创建一个文件夹来放置个人文件/图片。引用文件直接为<code>/文件夹名称/文件名</code></p></blockquote></li><li><p>建立评论系统</p><p>最终选择了 <code>gitalk</code></p></li><li><p>开启背景彩带</p></li><li><p>开启打字副标题</p></li></ul><h3 id="升级主题"><a href="#升级主题" class="headerlink" title="升级主题"></a>升级主题</h3><p>在主题目录下 <code>git pull</code></p><h1 id="博客迁移"><a href="#博客迁移" class="headerlink" title="博客迁移"></a>博客迁移</h1><p>进入大学换了新电脑，需要将博客文件迁移。</p><p>按照 <a href="https://www.zhihu.com/question/21193762/answer/103097754">迁移教程</a> 进行设置，中间又出现了很多错误。</p><h3 id="git-bash-中无法使用-npm"><a href="#git-bash-中无法使用-npm" class="headerlink" title="git bash 中无法使用 npm"></a>git bash 中无法使用 npm</h3><ul><li>保证进入到博客目录</li><li>重开 <code>git bash</code></li></ul><h3 id="git-无法连接到-github"><a href="#git-无法连接到-github" class="headerlink" title="git 无法连接到 github"></a>git 无法连接到 github</h3><p>要重新申请 <code>SSH Key</code>，重新设置连接的 <code>github</code> 账户密码。</p><h3 id="hexo-s-后显示-cannot-get"><a href="#hexo-s-后显示-cannot-get" class="headerlink" title="hexo s 后显示 cannot get"></a>hexo s 后显示 cannot get</h3><p>在博客根目录下运行 <code>npm install</code></p><h3 id="npm-install-出错"><a href="#npm-install-出错" class="headerlink" title="npm install 出错"></a>npm install 出错</h3><ul><li>更新 <code>npm</code></li><li>重开 <code>git bash</code></li></ul><h2 id="细节问题"><a href="#细节问题" class="headerlink" title="细节问题"></a>细节问题</h2><h3 id="导航菜单子级页面"><a href="#导航菜单子级页面" class="headerlink" title="导航菜单子级页面"></a>导航菜单子级页面</h3><ul><li><strong>目的</strong>  </li></ul><p>鼠标放在“<strong>日常</strong>”，拉下清单，点击“<strong>练字</strong>”，进入<strong>练字分类页</strong>。</p><ul><li><strong>措施</strong></li></ul><p>文章中 <code>categories: 练字</code><br>导航栏主题设置中 <code> - 练字: /categories/练字/</code></p><h3 id="上传后图片不显示"><a href="#上传后图片不显示" class="headerlink" title="上传后图片不显示"></a>上传后图片不显示</h3><ul><li><strong>目的</strong></li></ul><p>引用本地图片，上传后图片依然显示。</p><ul><li><strong>措施</strong></li></ul><p><code>npm install https://github.com/EricGerry/hexo-asset-image-0.0.5.git --save</code> 安装插件用来上传本地图片。</p><p>此时 <code>post</code> 中应 <code>cover: /img/calligraphy.jpg</code>，注意是 <code>/</code>。</p>]]></content>
    
    
    <summary type="html">博客的搭建记录</summary>
    
    
    
    
    <category term="Hexo" scheme="http://remoder.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
